{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is openemail - It is dockerized, free and open source mail server \u00b6 At Cybergate our effort to consolidate the best available open source email, collaboration, and email security solutions together with other infrastructure components like backend databases, authentication services etc. to provide highly agile, secure, and enterprise ready world class email and collaboration platform that can easily replace any other equivalent commercial alternative. Our administration backend web UI is a fork of Mailcow project. We are deeply indebted to their excellent effort in making such a good consolidation of all complex backend tools into a single pane of web UI by making it very easy for administrators to manage the system without using complex command line tools and editing. Inspired by the concept of Mailcow each an every backend application in openemai is running in a docker container by making openemail as a software that is ready deploy in your private or public cloud infrastructure by utilizing the benefit of agile and elastic cloud infrastructure of the modern day computing. openemail has been designed to work as a highly scalable and agile software which you can use it to host from few mailboxes to millions of mailboxes which are required by services providers. As like any other open source software you are free to use openemail at your own risk while you can obtained it as a supported and enterprise ready solution which is backed by Cybergate with its world class open source support team. Our enterprise support subscriptions are supporting unlimited mail domains and accounts while our subscription is an annual SLA which is confined to several support levels of support types and hardware profiles, either physical or virtual, of the systems that you will be using to deploy openemail. You can have both on premise and hosted solution under these subscription contracts. But all these optional and not required as openemail is 100% free. Get support \u00b6 Commercial support \u00b6 For commercial support contact sales@cybergate.lk or get a support subscription at Cybergate . Community support \u00b6 IRC @ Freenode, #openemail GitHub @ openemail Hosted openemail \u00b6 A fully featured managed openemaill is also available. Please contact Amila on +(94)77 316 545 for more details Migrate to openemaill at no cost \u00b6 We are happy to announce you that you can easily migrate from Zimbra, Microsoft Exchange or Office 365 hosted email or any other email service without compromising any of those major email and collaboration features like Addressbook, Calendar, Task and Contact sharing, public folders, resource sharing, Microsoft Outlook and Mobile Sync with native ActiveSync protocol. openemail is Absolutely Free \u00b6 You are well aware that email is by far the most widely used business application of the Internet. From a single owner business to a large enterprise primarily rely on email as their first line of business communication. The intention of this comprehensive free guide is to help you getting openemail deployed FREE if you have in house systems engineering skills. openemail is 100% free in terms of software licensing that blocks you from scaling your business. Security is our Priority \u00b6 openemail thinks security is a priority. Currently openemail supports almost all DNS based email security features like SPF,DKIM, DMARC etc, It is backed by Rspamd , a fast, free and open-source spam filtering system where you do not need to make any other investment on spam filtering. Integrated Sanesecurity ClamAV signatures improve ClamAV detection rate on Macro malware, Javascript malware, Phishing, Spam and other emailed Ransomware. This makes free your mails free from viruses and malware without any financial investment. openemail supports two-factor authentication for web UI making it more secure in web based administration Per user spam filtering \u00b6 You can fine grain openemail's spam filtering backend per email box basis by making it is the most flexible in spam managing. Backup and Restore \u00b6 openemail has provided you all required tools for backup and restoring helping administrators to have goodnight sleep and enjoy their holidays. You can sync your backup to your own FTP server or any other public cloud storage like Amazon S3, Google Bucket or any other. Domain based administration \u00b6 openemail supports multiple domains in a single installation with domain based administration making the delegation of administration is breezy and easy. openemail Demo \u00b6 You can find a demo at hasuna.openemail.io , use the following credentials to login: Administrator : admin / openemail Domain administrator : domainadm / openemail Mailbox : demo@openemaill.io / openemail Feature Overview \u00b6 The integrated openemail UI allows administrative work on your mail server instance as well as separated domain administrator and mailbox user access: DKIM and ARC support Black- and whitelists per domain and per user Spam score management per-user (reject spam, mark spam, greylist) Allow mailbox users to create temporary spam aliases Prepend mail tags to subject or move mail to sub folder (per-user) Allow mailbox users to toggle incoming and outgoing TLS enforcement Allow users to reset SOGo ActiveSync device caches imapsync to migrate or pull remote mailboxes regularly TFA: Yubi OTP and U2F USB (Google Chrome and derivatives only), TOTP Add domains, mailboxes, aliases, domain aliases and SOGo resources Add whitelisted hosts to forward mail to mailcow Fail2ban-like integration Quarantine system A lot more... openemail containers \u00b6 openemail comes with multiple containers linked in one bridged network. Each container represents a single application. Dovecot ClamAV (optional) Solr (optional) Memcached Redis MySQL Unbound (as resolver) PHP-FPM Postfix ACME-Client (thanks to @bebehei) Nginx Rspamd SOGo Netfilter (Fail2ban-like integration by @mkuron) Watchdog (basic monitoring) Docker data volumes \u00b6 The following Docker volumes are used to keep dynamic data - take care of them! vmail-vol-1 solr-vol-1 redis-vol-1 mysql-vol-1 rspamd-vol-1 postfix-vol-1 crypt-vol-1","title":"Product Overview and Support"},{"location":"#what-is-openemail-it-is-dockerized-free-and-open-source-mail-server","text":"At Cybergate our effort to consolidate the best available open source email, collaboration, and email security solutions together with other infrastructure components like backend databases, authentication services etc. to provide highly agile, secure, and enterprise ready world class email and collaboration platform that can easily replace any other equivalent commercial alternative. Our administration backend web UI is a fork of Mailcow project. We are deeply indebted to their excellent effort in making such a good consolidation of all complex backend tools into a single pane of web UI by making it very easy for administrators to manage the system without using complex command line tools and editing. Inspired by the concept of Mailcow each an every backend application in openemai is running in a docker container by making openemail as a software that is ready deploy in your private or public cloud infrastructure by utilizing the benefit of agile and elastic cloud infrastructure of the modern day computing. openemail has been designed to work as a highly scalable and agile software which you can use it to host from few mailboxes to millions of mailboxes which are required by services providers. As like any other open source software you are free to use openemail at your own risk while you can obtained it as a supported and enterprise ready solution which is backed by Cybergate with its world class open source support team. Our enterprise support subscriptions are supporting unlimited mail domains and accounts while our subscription is an annual SLA which is confined to several support levels of support types and hardware profiles, either physical or virtual, of the systems that you will be using to deploy openemail. You can have both on premise and hosted solution under these subscription contracts. But all these optional and not required as openemail is 100% free.","title":"What is openemail - It is dockerized, free and open source mail server"},{"location":"#get-support","text":"","title":"Get support"},{"location":"#commercial-support","text":"For commercial support contact sales@cybergate.lk or get a support subscription at Cybergate .","title":"Commercial support"},{"location":"#community-support","text":"IRC @ Freenode, #openemail GitHub @ openemail","title":"Community support"},{"location":"#hosted-openemail","text":"A fully featured managed openemaill is also available. Please contact Amila on +(94)77 316 545 for more details","title":"Hosted openemail"},{"location":"#migrate-to-openemaill-at-no-cost","text":"We are happy to announce you that you can easily migrate from Zimbra, Microsoft Exchange or Office 365 hosted email or any other email service without compromising any of those major email and collaboration features like Addressbook, Calendar, Task and Contact sharing, public folders, resource sharing, Microsoft Outlook and Mobile Sync with native ActiveSync protocol.","title":"Migrate to openemaill at no cost"},{"location":"#openemail-is-absolutely-free","text":"You are well aware that email is by far the most widely used business application of the Internet. From a single owner business to a large enterprise primarily rely on email as their first line of business communication. The intention of this comprehensive free guide is to help you getting openemail deployed FREE if you have in house systems engineering skills. openemail is 100% free in terms of software licensing that blocks you from scaling your business.","title":"openemail is Absolutely Free"},{"location":"#security-is-our-priority","text":"openemail thinks security is a priority. Currently openemail supports almost all DNS based email security features like SPF,DKIM, DMARC etc, It is backed by Rspamd , a fast, free and open-source spam filtering system where you do not need to make any other investment on spam filtering. Integrated Sanesecurity ClamAV signatures improve ClamAV detection rate on Macro malware, Javascript malware, Phishing, Spam and other emailed Ransomware. This makes free your mails free from viruses and malware without any financial investment. openemail supports two-factor authentication for web UI making it more secure in web based administration","title":"Security is our Priority"},{"location":"#per-user-spam-filtering","text":"You can fine grain openemail's spam filtering backend per email box basis by making it is the most flexible in spam managing.","title":"Per user spam filtering"},{"location":"#backup-and-restore","text":"openemail has provided you all required tools for backup and restoring helping administrators to have goodnight sleep and enjoy their holidays. You can sync your backup to your own FTP server or any other public cloud storage like Amazon S3, Google Bucket or any other.","title":"Backup and Restore"},{"location":"#domain-based-administration","text":"openemail supports multiple domains in a single installation with domain based administration making the delegation of administration is breezy and easy.","title":"Domain based administration"},{"location":"#openemail-demo","text":"You can find a demo at hasuna.openemail.io , use the following credentials to login: Administrator : admin / openemail Domain administrator : domainadm / openemail Mailbox : demo@openemaill.io / openemail","title":"openemail Demo"},{"location":"#feature-overview","text":"The integrated openemail UI allows administrative work on your mail server instance as well as separated domain administrator and mailbox user access: DKIM and ARC support Black- and whitelists per domain and per user Spam score management per-user (reject spam, mark spam, greylist) Allow mailbox users to create temporary spam aliases Prepend mail tags to subject or move mail to sub folder (per-user) Allow mailbox users to toggle incoming and outgoing TLS enforcement Allow users to reset SOGo ActiveSync device caches imapsync to migrate or pull remote mailboxes regularly TFA: Yubi OTP and U2F USB (Google Chrome and derivatives only), TOTP Add domains, mailboxes, aliases, domain aliases and SOGo resources Add whitelisted hosts to forward mail to mailcow Fail2ban-like integration Quarantine system A lot more...","title":"Feature Overview"},{"location":"#openemail-containers","text":"openemail comes with multiple containers linked in one bridged network. Each container represents a single application. Dovecot ClamAV (optional) Solr (optional) Memcached Redis MySQL Unbound (as resolver) PHP-FPM Postfix ACME-Client (thanks to @bebehei) Nginx Rspamd SOGo Netfilter (Fail2ban-like integration by @mkuron) Watchdog (basic monitoring)","title":"openemail containers"},{"location":"#docker-data-volumes","text":"The following Docker volumes are used to keep dynamic data - take care of them! vmail-vol-1 solr-vol-1 redis-vol-1 mysql-vol-1 rspamd-vol-1 postfix-vol-1 crypt-vol-1","title":"Docker data volumes"},{"location":"b_n_r_backup/","text":"Backup \u00b6 You can use the provided script helper-scripts/backup_and_restore.sh to backup mailcow automatically. Please do not copy this script to another location. To run a backup, write \"backup\" as first parameter and either one or more components to backup as following parameters. You can also use \"all\" as second parameter to backup all components. # Syntax: # ./helper-scripts/backup_and_restore.sh backup (vmail|crypt|redis|rspamd|postfix|mysql|all) # Backup all ./helper-scripts/backup_and_restore.sh backup all # Backup vmail, crypt and mysql data ./helper-scripts/backup_and_restore.sh backup vmail crypt mysql The script will ask you for a backup location. Inside of this location it will create folders in the format \"mailcow_DATE\". You should not rename those folders to not break the restore process. To run a backup unattended, define MAILCOW_BACKUP_LOCATION as environment variable before starting the script: MAILCOW_BACKUP_LOCATION=/opt/backup /opt/mailcow-dockerized/helper-scripts/backup_and_restore.sh backup all","title":"Backup"},{"location":"b_n_r_backup/#backup","text":"You can use the provided script helper-scripts/backup_and_restore.sh to backup mailcow automatically. Please do not copy this script to another location. To run a backup, write \"backup\" as first parameter and either one or more components to backup as following parameters. You can also use \"all\" as second parameter to backup all components. # Syntax: # ./helper-scripts/backup_and_restore.sh backup (vmail|crypt|redis|rspamd|postfix|mysql|all) # Backup all ./helper-scripts/backup_and_restore.sh backup all # Backup vmail, crypt and mysql data ./helper-scripts/backup_and_restore.sh backup vmail crypt mysql The script will ask you for a backup location. Inside of this location it will create folders in the format \"mailcow_DATE\". You should not rename those folders to not break the restore process. To run a backup unattended, define MAILCOW_BACKUP_LOCATION as environment variable before starting the script: MAILCOW_BACKUP_LOCATION=/opt/backup /opt/mailcow-dockerized/helper-scripts/backup_and_restore.sh backup all","title":"Backup"},{"location":"b_n_r_restore/","text":"Restore \u00b6 Please do not copy this script to another location. To run a restore, write \"restore\" as first parameter. # Syntax: # ./helper-scripts/backup_and_restore.sh restore The script will ask you for a backup location containing the mailcow_DATE folders.","title":"Restore"},{"location":"b_n_r_restore/#restore","text":"Please do not copy this script to another location. To run a restore, write \"restore\" as first parameter. # Syntax: # ./helper-scripts/backup_and_restore.sh restore The script will ask you for a backup location containing the mailcow_DATE folders.","title":"Restore"},{"location":"client/","text":"mailcow supports a variety of email clients, both on desktop computers and on smartphones. Below, you can find a number of configuration guides that explain how to configure your mailcow account. Tip If you access this page by logging into your mailcow server and clicking the \"Show configuration guides for email clients and smartphones\" link, all of the guides will be personalized with your email address and server name. Success Since you accessed this page after logging into your mailcow server, all of the guides have been personalized with your email address and server name. Android Apple iOS / macOS eM Client KDE Kontact / KMail Microsoft Outlook Mozilla Thunderbird Windows Mail Windows Phone Manual configuration","title":"Overview"},{"location":"debug-attach_service/","text":"Attaching a Container to your Shell \u00b6 To attach a container to your shell you can simply run docker-compose exec $Service_Name /bin/bash Connecting to Services \u00b6 If you want to connect to a service / application directly it is always a good idea to source mailcow.conf to get all relevant variables into your environment. MySQL \u00b6 source mailcow.conf docker-compose exec mysql-mailcow mysql -u ${ DBUSER } -p ${ DBPASS } ${ DBNAME } Redis \u00b6 docker-compose exec redis-mailcow redis-cli Service Descriptions \u00b6 Here is a brief overview of what container / service does what: Service Name Service Descriptions unbound-mailcow Local (DNSSEC) DNS Resolver mysql-mailcow Stores SOGo's and most of mailcow's settings postfix-mailcow Receives and sends mails dovecot-mailcow User logins and sieve filter redis-mailcow Storage back-end for DKIM keys and Rspamd rspamd-mailcow Mail filtering system. Used for av handling, dkim signing, spam handling clamd-mailcow Scans attachments for viruses sogo-mailcow Webmail client that handles Microsoft ActiveSync and Cal- / CardDav nginx-mailcow Nginx remote proxy that handles all mailcow related HTTP / HTTPS requests acme-mailcow Automates HTTPS (SSL/TLS) certificate deployment memcached-mailcow Internal caching system for mailcow services watchdog-mailcow Allows the monitoring of docker containers / services php-fpm-mailcow Powers the mailcow web UI netfilter-mailcow Fail2Ban like integration","title":"Attach a Container"},{"location":"debug-attach_service/#attaching-a-container-to-your-shell","text":"To attach a container to your shell you can simply run docker-compose exec $Service_Name /bin/bash","title":"Attaching a Container to your Shell"},{"location":"debug-attach_service/#connecting-to-services","text":"If you want to connect to a service / application directly it is always a good idea to source mailcow.conf to get all relevant variables into your environment.","title":"Connecting to Services"},{"location":"debug-attach_service/#mysql","text":"source mailcow.conf docker-compose exec mysql-mailcow mysql -u ${ DBUSER } -p ${ DBPASS } ${ DBNAME }","title":"MySQL"},{"location":"debug-attach_service/#redis","text":"docker-compose exec redis-mailcow redis-cli","title":"Redis"},{"location":"debug-attach_service/#service-descriptions","text":"Here is a brief overview of what container / service does what: Service Name Service Descriptions unbound-mailcow Local (DNSSEC) DNS Resolver mysql-mailcow Stores SOGo's and most of mailcow's settings postfix-mailcow Receives and sends mails dovecot-mailcow User logins and sieve filter redis-mailcow Storage back-end for DKIM keys and Rspamd rspamd-mailcow Mail filtering system. Used for av handling, dkim signing, spam handling clamd-mailcow Scans attachments for viruses sogo-mailcow Webmail client that handles Microsoft ActiveSync and Cal- / CardDav nginx-mailcow Nginx remote proxy that handles all mailcow related HTTP / HTTPS requests acme-mailcow Automates HTTPS (SSL/TLS) certificate deployment memcached-mailcow Internal caching system for mailcow services watchdog-mailcow Allows the monitoring of docker containers / services php-fpm-mailcow Powers the mailcow web UI netfilter-mailcow Fail2Ban like integration","title":"Service Descriptions"},{"location":"debug-common_problems/","text":"Here we list common problems and possible solutions: Mail loops back to myself \u00b6 Please check in your mailcow UI if you made the domain a backup MX : I can receive but not send mails \u00b6 There are a lot of things that could prevent you from sending mail: Check if your IP is on any blacklists. You could use dnsbl.info or any other similar service to check for your IP. There are some consumer ISP routers out there, that block mail ports for non whitelisted domains. Please check if you can reach your server on the ports 465 or 587 : # telnet 74.125.133.27 465 Trying 74.125.133.27... Connected to 74.125.133.27. Escape character is '^]'. My mails are identified as Spam \u00b6 Please read our guide on DNS configuration . docker-compose throws weird errors \u00b6 ... like: ERROR: Invalid interpolation format ... AttributeError: 'NoneType' object has no attribute 'keys' . ERROR: In file './docker-compose.yml' service 'version' doesn't have any configuration options . When you encounter one or similar messages while trying to run mailcow: dockerized please check if you have the latest version of Docker and docker-compose Container XY is unhealthy \u00b6 This error tries to tell you that one of the (health) conditions for a certain container are not met. Therefore it can't be started. This can have several reasons, the most common one is an updated git clone but old docker image or vice versa. A wrong configured firewall could also cause such a failure. The containers need to be able to talk to each other over the network 172.22.1.1/24. It might also be wrongly linked file (i.e. SSL certificate) that prevents a crucial container (nginx) from starting, so always check your logs to get an Idea where your problem is coming from. Address already in use \u00b6 If you get an error message like: ERROR : for postfix - mailcow Cannot start service postfix - mailcow : driver failed programming external connectivity on endpoint mailcowdockerized_postfix - mailcow_1 : Error starting userland proxy : listen tcp 0.0 . 0.0 : 25 : bind : address already in use while trying to start / install mailcow: dockerized, make sure you've followed our section on the prerequisites . XYZ can't connect to ... \u00b6 Please check your local firewall! Docker and iptables-based firewalls sometimes create conflicting rules, so disable the firewall on your host to determine whether your connection issues are caused by such conflicts. If they are, you need to manually create appropriate rules in your host firewall to permit the necessary connections. If you experience connection problems from home, please check your ISP router's firewall too, some of them block mail traffic on the SMTP (587) or SMTPS (465) ports. It could also be, that your ISP is blocking the ports for SUBMISSION (25). While Linux users can chose from a variety of tools 1 to check if a port is open, the Windows user has only the command telnet host port available by default (and it has to be activated since Windows Vista). To enable telnet on a Windows after Vista please check this guide or enter the following command in an terminal with administrator priviliges : dism /online /Enable-Feature /FeatureName:TelnetClient Inotify instance limit for user 5000 (UID vmail) exceeded ( see #453 ) \u00b6 Docker containers use the Docker hosts inotify limits. Setting them on your Docker host will pass them to the container. netcat , nmap , openssl , telnet , etc. \u21a9","title":"Common Problems"},{"location":"debug-common_problems/#mail-loops-back-to-myself","text":"Please check in your mailcow UI if you made the domain a backup MX :","title":"Mail loops back to myself"},{"location":"debug-common_problems/#i-can-receive-but-not-send-mails","text":"There are a lot of things that could prevent you from sending mail: Check if your IP is on any blacklists. You could use dnsbl.info or any other similar service to check for your IP. There are some consumer ISP routers out there, that block mail ports for non whitelisted domains. Please check if you can reach your server on the ports 465 or 587 : # telnet 74.125.133.27 465 Trying 74.125.133.27... Connected to 74.125.133.27. Escape character is '^]'.","title":"I can receive but not send mails"},{"location":"debug-common_problems/#my-mails-are-identified-as-spam","text":"Please read our guide on DNS configuration .","title":"My mails are identified as Spam"},{"location":"debug-common_problems/#docker-compose-throws-weird-errors","text":"... like: ERROR: Invalid interpolation format ... AttributeError: 'NoneType' object has no attribute 'keys' . ERROR: In file './docker-compose.yml' service 'version' doesn't have any configuration options . When you encounter one or similar messages while trying to run mailcow: dockerized please check if you have the latest version of Docker and docker-compose","title":"docker-compose throws weird errors"},{"location":"debug-common_problems/#container-xy-is-unhealthy","text":"This error tries to tell you that one of the (health) conditions for a certain container are not met. Therefore it can't be started. This can have several reasons, the most common one is an updated git clone but old docker image or vice versa. A wrong configured firewall could also cause such a failure. The containers need to be able to talk to each other over the network 172.22.1.1/24. It might also be wrongly linked file (i.e. SSL certificate) that prevents a crucial container (nginx) from starting, so always check your logs to get an Idea where your problem is coming from.","title":"Container XY is unhealthy"},{"location":"debug-common_problems/#address-already-in-use","text":"If you get an error message like: ERROR : for postfix - mailcow Cannot start service postfix - mailcow : driver failed programming external connectivity on endpoint mailcowdockerized_postfix - mailcow_1 : Error starting userland proxy : listen tcp 0.0 . 0.0 : 25 : bind : address already in use while trying to start / install mailcow: dockerized, make sure you've followed our section on the prerequisites .","title":"Address already in use"},{"location":"debug-common_problems/#xyz-cant-connect-to","text":"Please check your local firewall! Docker and iptables-based firewalls sometimes create conflicting rules, so disable the firewall on your host to determine whether your connection issues are caused by such conflicts. If they are, you need to manually create appropriate rules in your host firewall to permit the necessary connections. If you experience connection problems from home, please check your ISP router's firewall too, some of them block mail traffic on the SMTP (587) or SMTPS (465) ports. It could also be, that your ISP is blocking the ports for SUBMISSION (25). While Linux users can chose from a variety of tools 1 to check if a port is open, the Windows user has only the command telnet host port available by default (and it has to be activated since Windows Vista). To enable telnet on a Windows after Vista please check this guide or enter the following command in an terminal with administrator priviliges : dism /online /Enable-Feature /FeatureName:TelnetClient","title":"XYZ can't connect to ..."},{"location":"debug-common_problems/#inotify-instance-limit-for-user-5000-uid-vmail-exceeded-see-453","text":"Docker containers use the Docker hosts inotify limits. Setting them on your Docker host will pass them to the container. netcat , nmap , openssl , telnet , etc. \u21a9","title":"Inotify instance limit for user 5000 (UID vmail) exceeded (see #453)"},{"location":"debug-logs/","text":"Warning This section only applies for Dockers default logging driver (JSON). To view the logs of all mailcow: dockerized related containers, you can use docker-compose logs inside your mailcow-dockerized folder that contains your mailcow.conf . This is usually a bit much, but you could trim the output with --tail=100 to the last 100 lines per container, or add a -f to follow the live output of all your services. To view the logs of a specific service you can use docker-compose logs [options] $service_name Info The available options for the command docker-compose logs are: --no-color : Produce monochrome output. -f : Follow the log output. -t : Show timestamps. --tail=\"all\" : Number of lines to show from the end of the logs for each container.","title":"Logs"},{"location":"debug-reset_pw/","text":"mailcow Admin Account \u00b6 Reset mailcow admin to admin:moohoo . Older mailcow: dockerized installations may find mailcow-reset-admin.sh in their mailcow root directory (mailcow_path). cd mailcow_path ./helper-scripts/mailcow-reset-admin.sh Reset MySQL Passwords \u00b6 Stop the stack by running docker-compose stop . When the containers came to a stop, run this command: docker-compose run --rm --entrypoint '/bin/sh -c \"gosu mysql mysqld --skip-grant-tables & sleep 10 && mysql -hlocalhost -uroot && exit 0\"' mysql-mailcow 1. Find database name \u00b6 # source mailcow.conf # docker-compose exec mysql-mailcow mysql -u ${ DBUSER } -p ${ DBPASS } ${ DBNAME } MariaDB [(none)]> show databases; +--------------------+ | Database | +--------------------+ | information_schema | | mailcow_database | < ===== | mysql | | performance_schema | +--------------------+ 4 rows in set (0.00 sec) 2. Reset one or more users \u00b6 Both \"password\" and \"authentication_string\" exist. Currently \"password\" is used, but better set both. MariaDB [(none)]> SELECT user FROM mysql.user; +--------------+ | user | +--------------+ | mailcow_user | <===== | root | +--------------+ 2 rows in set (0.00 sec) MariaDB [(none)]> FLUSH PRIVILEGES; MariaDB [(none)]> UPDATE mysql.user SET authentication_string = PASSWORD('gotr00t'), password = PASSWORD('gotr00t') WHERE User = 'root' AND Host = '%'; MariaDB [(none)]> UPDATE mysql.user SET authentication_string = PASSWORD('mookuh'), password = PASSWORD('mookuh') WHERE User = 'mailcow' AND Host = '%'; MariaDB [(none)]> FLUSH PRIVILEGES; Remove Two-Factor Authentication \u00b6 This works similar to resetting a MySQL password, now we do it from the host without connecting to the MySQL CLI: source mailcow.conf docker-compose exec mysql-mailcow mysql -u ${ DBUSER } -p ${ DBPASS } ${ DBNAME } -e \"DELETE FROM tfa WHERE username='YOUR_USERNAME';\"","title":"Reset Passwords"},{"location":"debug-reset_pw/#mailcow-admin-account","text":"Reset mailcow admin to admin:moohoo . Older mailcow: dockerized installations may find mailcow-reset-admin.sh in their mailcow root directory (mailcow_path). cd mailcow_path ./helper-scripts/mailcow-reset-admin.sh","title":"mailcow Admin Account"},{"location":"debug-reset_pw/#reset-mysql-passwords","text":"Stop the stack by running docker-compose stop . When the containers came to a stop, run this command: docker-compose run --rm --entrypoint '/bin/sh -c \"gosu mysql mysqld --skip-grant-tables & sleep 10 && mysql -hlocalhost -uroot && exit 0\"' mysql-mailcow","title":"Reset MySQL Passwords"},{"location":"debug-reset_pw/#146-find-database-name","text":"# source mailcow.conf # docker-compose exec mysql-mailcow mysql -u ${ DBUSER } -p ${ DBPASS } ${ DBNAME } MariaDB [(none)]> show databases; +--------------------+ | Database | +--------------------+ | information_schema | | mailcow_database | < ===== | mysql | | performance_schema | +--------------------+ 4 rows in set (0.00 sec)","title":"1. Find database name"},{"location":"debug-reset_pw/#246-reset-one-or-more-users","text":"Both \"password\" and \"authentication_string\" exist. Currently \"password\" is used, but better set both. MariaDB [(none)]> SELECT user FROM mysql.user; +--------------+ | user | +--------------+ | mailcow_user | <===== | root | +--------------+ 2 rows in set (0.00 sec) MariaDB [(none)]> FLUSH PRIVILEGES; MariaDB [(none)]> UPDATE mysql.user SET authentication_string = PASSWORD('gotr00t'), password = PASSWORD('gotr00t') WHERE User = 'root' AND Host = '%'; MariaDB [(none)]> UPDATE mysql.user SET authentication_string = PASSWORD('mookuh'), password = PASSWORD('mookuh') WHERE User = 'mailcow' AND Host = '%'; MariaDB [(none)]> FLUSH PRIVILEGES;","title":"2. Reset one or more users"},{"location":"debug-reset_pw/#remove-two-factor-authentication","text":"This works similar to resetting a MySQL password, now we do it from the host without connecting to the MySQL CLI: source mailcow.conf docker-compose exec mysql-mailcow mysql -u ${ DBUSER } -p ${ DBPASS } ${ DBNAME } -e \"DELETE FROM tfa WHERE username='YOUR_USERNAME';\"","title":"Remove Two-Factor Authentication"},{"location":"debug-rm_volumes/","text":"You may want to remove a set of persistent data to resolve a conflict or to start over: docker volume rm mailcowdockerized_ ${ VOLUME_NAME } Remove volume mysql-vol-1 to remove all MySQL data. Remove volume redis-vol-1 to remove all Redis data. Remove volume vmail-vol-1 to remove all contents of /var/vmail mounted to dovecot-mailcow . Remove volume rspamd-vol-1 to remove all Rspamd data. Remove volume crypt-vol-1 to remove all crypto data. This will render all mails unreadable. Running docker-compose down -v will destroy all mailcow: dockerized volumes and delete any related containers and networks.","title":"Remove Persistent Data"},{"location":"debug/","text":"When a problem occurs, then always for a reason! What you want to do in such a case is: Read your logs; follow them to see what the reason for your problem is. Follow the leads given to you in your logfiles and start investigating. Restarting the troubled service or the whole stack to see if the problem persists. Read the documentation of the troubled service and search it's bugtracker for your problem. Search our issues for your problem. Create an issue over at our GitHub repository if you think your problem might be a bug or a missing feature you badly need. But please make sure, that you include all the logs and a full description to your problem. Connect to IRC ( chat.freenode.net ) and join our IRC channel #mailcow .","title":"Introduction"},{"location":"firststeps-disable_ipv6/","text":"This is NOT recommended! If IPv6 MUST be disabled to fit a network, open docker-compose.yml , search for enable_ipv6 ... networks : mailcow - network : [...] enable_ipv6 : true [...] ...change it to enable_ipv6: false . mailcow needs to be shutdown, the containers removed and the network recreated: docker-compose down docker-compose up -d","title":"Disable IPv6"},{"location":"firststeps-local_mta/","text":"The easiest option would be to disable the listener on port 25/tcp. Postfix users disable the listener by commenting the following line (starting with smtp or 25 ) in /etc/postfix/master.cf : #smtp inet n - - - - smtpd Furthermore, to relay over a dockerized mailcow, you may want to add 172.22.1.1 as relayhost and remove the Docker interface from \"inet_interfaces\": postconf -e 'relayhost = 172.22.1.1' postconf -e \"mynetworks = 127.0.0.0/8 [::ffff:127.0.0.0]/104 [::1]/128\" postconf -e \"inet_interfaces = loopback-only\" postconf -e \"relay_transport = relay\" postconf -e \"default_transport = smtp\" Now it is important to not have the same FQDN in myhostname as you use for your dockerized mailcow. Check your local (non-Docker) Postfix' main.cf for myhostname and set it to something different, for example local.my.fqdn.tld . \"172.22.1.1\" is the mailcow created network gateway in Docker. Relaying over this interface is necessary (instead of - for example - relaying directly over ${MAILCOW_HOSTNAME}) to relay over a known internal network. Restart Postfix after applying your changes.","title":"Local MTA on Docker host"},{"location":"firststeps-logging/","text":"Logging in mailcow: dockerized consists of multiple stages, but is, after all, much more flexible and easier to integrate into a logging daemon than before. In Docker the containerized application (PID 1) writes its output to stdout. For real one-application containers this works just fine. Run docker-compose logs --help to learn more. Some containers log or stream to multiple destinations. No container will keep persistent logs in it. Containers are transient items! In the end, every line of logs will reach the Docker daemon - unfiltered. The default logging driver is \"json\" . Filtered logs \u00b6 Some logs are filtered and written to Redis keys but also streamed to a Redis channel. The Redis channel is used to stream logs with failed authentication attempts to be read by netfilter-mailcow. The Redis keys are persistent and will keep 10000 lines of logs for the web UI. This mechanism makes it possible to use whatever Docker logging driver you want to, without losing the ability to read logs from the UI or ban suspicious clients with netfilter-mailcow. Redis keys will only hold logs from applications and filter out system messages (think of cron etc.). Logging drivers \u00b6 Here is the good news: Since Docker has some great logging drivers, you can integrate mailcow: dockerized into your existing logging environment with ease. Docker logging drivers can now be implemented as plugins, next to Dockers integrated drivers. Logging driver plugins are available in Docker 17.05 and higher. Edit docker-compose.yml and append, for example, this block to use the \"gelf\" logging plugin: logging : log_driver : \"gelf\" options : gelf - address : \"udp://graylog:12201\" gelf - tag : \"mailcow-logs\" Linux users can also add or edit the Docker daemons configuration file /etc/docker/daemon.json to affect the global logging behavior. Windows users please have a look at the docker documentation : { ... \"log-driver\": \"gelf\", \"log-opts\": { \"gelf-address\": \"udp://graylog:12201\", \"gelf-tag\": \"mailcow-logs\" } ... } Restart the Docker daemon and run docker-compose down && docker-compose up -d to recreate the containers with the new logging driver.","title":"Logging"},{"location":"firststeps-logging/#filtered-logs","text":"Some logs are filtered and written to Redis keys but also streamed to a Redis channel. The Redis channel is used to stream logs with failed authentication attempts to be read by netfilter-mailcow. The Redis keys are persistent and will keep 10000 lines of logs for the web UI. This mechanism makes it possible to use whatever Docker logging driver you want to, without losing the ability to read logs from the UI or ban suspicious clients with netfilter-mailcow. Redis keys will only hold logs from applications and filter out system messages (think of cron etc.).","title":"Filtered logs"},{"location":"firststeps-logging/#logging-drivers","text":"Here is the good news: Since Docker has some great logging drivers, you can integrate mailcow: dockerized into your existing logging environment with ease. Docker logging drivers can now be implemented as plugins, next to Dockers integrated drivers. Logging driver plugins are available in Docker 17.05 and higher. Edit docker-compose.yml and append, for example, this block to use the \"gelf\" logging plugin: logging : log_driver : \"gelf\" options : gelf - address : \"udp://graylog:12201\" gelf - tag : \"mailcow-logs\" Linux users can also add or edit the Docker daemons configuration file /etc/docker/daemon.json to affect the global logging behavior. Windows users please have a look at the docker documentation : { ... \"log-driver\": \"gelf\", \"log-opts\": { \"gelf-address\": \"udp://graylog:12201\", \"gelf-tag\": \"mailcow-logs\" } ... } Restart the Docker daemon and run docker-compose down && docker-compose up -d to recreate the containers with the new logging driver.","title":"Logging drivers"},{"location":"firststeps-relayhost/","text":"As of September 12th you can setup relayhosts as admin by using the mailcow UI. Edit a domain afterwards and assign a relayhost for it to use.","title":"Setup a relayhost"},{"location":"firststeps-rp/","text":"You don't need to change the Nginx site that comes with mailcow: dockerized. mailcow: dockerized trusts the default gateway IP 172.22.1.1 as proxy. 1. Make sure you change HTTP_BIND and HTTPS_BIND in mailcow.conf to a local address and set the ports accordingly, for example: HTTP_BIND = 127 .0.0.1 HTTP_PORT = 8080 HTTPS_BIND = 127 .0.0.1 HTTPS_PORT = 8443 IMPORTANT: Do not use port 8081! Recreate affected containers by running docker-compose up -d . Warning Make sure you run generate_config.sh before you enable any site configuration examples below. The script generate_config.sh copies snake-oil certificates to the correct location, so the services will not fail to start due to missing files. Info Using the site configs below will forward ACME requests to mailcow and let it handle certificates itself. The downside of using mailcow as ACME client behind a reverse proxy is, that you will need to reload your webserver after acme-mailcow changed/renewed/created the certificate. You can either reload your webserver daily or write a script to watch the file for changes. On many servers logrotate will reload the webserver daily anyway. If you want to use a local certbot installation, you will need to change the SSL certificate parameters accordingly. Make sure you run a post-hook script when you decide to use external ACME clients. You will find an example at the bottom of this page. 2. Configure your local webserver as reverse proxy: Apache 2.4 \u00b6 Required modules: a2enmod rewrite proxy proxy_http headers ssl We rewrite to HTTPS, but keep requests to autoconfig.* on a plain session. Let's Encrypt will follow our rewrite, certificate requests will work fine. Take care of highlighted lines. <VirtualHost *:80 > ServerName CHANGE_TO_MAILCOW_HOSTNAME ServerAlias autodiscover.* ServerAlias autoconfig.* RewriteEngine on RewriteCond %{HTTP_HOST} ^autoconfig\\. [NC] RewriteRule ^ - [S=1] RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI}# [L,NE,R=permanent] RewriteRule ^ /autoconfig.php [PT] ProxyPass / http://127.0.0.1:8080/ ProxyPassReverse / http://127.0.0.1:8080/ ProxyPreserveHost On ProxyAddHeaders On RequestHeader set X-Forwarded-Proto \"http\" </VirtualHost> <VirtualHost *:443 > ServerName CHANGE_TO_MAILCOW_HOSTNAME ServerAlias autodiscover.* # You should proxy to a plain HTTP session to offload SSL processing ProxyPass / http://127.0.0.1:8080/ ProxyPassReverse / http://127.0.0.1:8080/ ProxyPreserveHost On ProxyAddHeaders On RequestHeader set X-Forwarded-Proto \"https\" SSLCertificateFile MAILCOW_PATH/data/assets/ssl/cert.pem SSLCertificateKeyFile MAILCOW_PATH/data/assets/ssl/key.pem # If you plan to proxy to a HTTPS host: #SSLProxyEngine On # If you plan to proxy to an untrusted HTTPS host: #SSLProxyVerify none #SSLProxyCheckPeerCN off #SSLProxyCheckPeerName off #SSLProxyCheckPeerExpire off </VirtualHost> Nginx \u00b6 In our Nginx reverse proxy template, we rewrite all requests to HTTPS, while keeping autoconfig.* domains on a plain session. Let's Encrypt will follow our rewrite, certificate requests will work fine. Take care of highlighted lines. server { listen 80 default_server ; listen [ :: ] : 80 default_server ; server_name CHANGE_TO_MAILCOW_HOSTNAME autodiscover.* ; return 301 https : // $ host $ request_uri ; } server { listen 80 ; listen [ :: ] : 80 ; server_name autoconfig.* ; rewrite ^/(.*)$ /autoconfig.php last ; location / { proxy_pass http : // 127.0.0.1 : 8080 / ; proxy_set_header Host $http_host ; proxy_set_header X-Real-IP $remote_addr ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_set_header X-Forwarded-Proto $scheme ; client_max_body_size 0 ; } } server { listen 443 ; server_name CHANGE_TO_MAILCOW_HOSTNAME autodiscover.* autoconfig.* ; ssl on ; ssl_certificate MAILCOW_PATH/data/assets/ssl/cert.pem ; ssl_certificate_key MAILCOW_PATH/data/assets/ssl/key.pem ; ssl_protocols TLSv1 TLSv1.1 TLSv1.2 ; ssl_ciphers HIGH : ! aNULL :! MD5 ; location / { proxy_pass http : // 127.0.0.1 : 8080 / ; proxy_set_header Host $http_host ; proxy_set_header X-Real-IP $remote_addr ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_set_header X-Forwarded-Proto $scheme ; client_max_body_size 0 ; } } HAProxy \u00b6 Important/Fixme : This example only forwards HTTPS traffic and does not use mailcows built-in ACME client. frontend https-in bind :::443 v4v6 ssl crt mailcow.pem default_backend mailcow backend mailcow option forwardfor http-request set-header X-Forwarded-Proto https if { ssl_fc } http-request set-header X-Forwarded-Proto http if !{ ssl_fc } server mailcow 127.0.0.1:8080 check Optional: Post-hook script for non-mailcow ACME clients \u00b6 Using a local certbot (or any other ACME client) requires to restart some containers, you can do this with a post-hook script. Make sure you change the pathes accordingly: #!/bin/bash cp /etc/letsencrypt/live/my.domain.tld/fullchain.pem /opt/mailcow-dockerized/data/assets/ssl/cert.pem cp /etc/letsencrypt/live/my.domain.tld/privkey.pem /opt/mailcow-dockerized/data/assets/ssl/key.pem # Either restart... #postfix_c=$(docker ps -qaf name=postfix-mailcow) #dovecot_c=$(docker ps -qaf name=dovecot-mailcow) #nginx_c=$(docker ps -qaf name=nginx-mailcow) #docker restart ${postfix_c} ${dovecot_c} ${nginx_c} # ...or reload: docker exec $( docker ps -qaf name = postfix-mailcow ) postfix reload docker exec $( docker ps -qaf name = nginx-mailcow ) nginx -s reload docker exec $( docker ps -qaf name = dovecot-mailcow ) dovecot reload","title":"Reverse Proxy"},{"location":"firststeps-rp/#apache-24","text":"Required modules: a2enmod rewrite proxy proxy_http headers ssl We rewrite to HTTPS, but keep requests to autoconfig.* on a plain session. Let's Encrypt will follow our rewrite, certificate requests will work fine. Take care of highlighted lines. <VirtualHost *:80 > ServerName CHANGE_TO_MAILCOW_HOSTNAME ServerAlias autodiscover.* ServerAlias autoconfig.* RewriteEngine on RewriteCond %{HTTP_HOST} ^autoconfig\\. [NC] RewriteRule ^ - [S=1] RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI}# [L,NE,R=permanent] RewriteRule ^ /autoconfig.php [PT] ProxyPass / http://127.0.0.1:8080/ ProxyPassReverse / http://127.0.0.1:8080/ ProxyPreserveHost On ProxyAddHeaders On RequestHeader set X-Forwarded-Proto \"http\" </VirtualHost> <VirtualHost *:443 > ServerName CHANGE_TO_MAILCOW_HOSTNAME ServerAlias autodiscover.* # You should proxy to a plain HTTP session to offload SSL processing ProxyPass / http://127.0.0.1:8080/ ProxyPassReverse / http://127.0.0.1:8080/ ProxyPreserveHost On ProxyAddHeaders On RequestHeader set X-Forwarded-Proto \"https\" SSLCertificateFile MAILCOW_PATH/data/assets/ssl/cert.pem SSLCertificateKeyFile MAILCOW_PATH/data/assets/ssl/key.pem # If you plan to proxy to a HTTPS host: #SSLProxyEngine On # If you plan to proxy to an untrusted HTTPS host: #SSLProxyVerify none #SSLProxyCheckPeerCN off #SSLProxyCheckPeerName off #SSLProxyCheckPeerExpire off </VirtualHost>","title":"Apache 2.4"},{"location":"firststeps-rp/#nginx","text":"In our Nginx reverse proxy template, we rewrite all requests to HTTPS, while keeping autoconfig.* domains on a plain session. Let's Encrypt will follow our rewrite, certificate requests will work fine. Take care of highlighted lines. server { listen 80 default_server ; listen [ :: ] : 80 default_server ; server_name CHANGE_TO_MAILCOW_HOSTNAME autodiscover.* ; return 301 https : // $ host $ request_uri ; } server { listen 80 ; listen [ :: ] : 80 ; server_name autoconfig.* ; rewrite ^/(.*)$ /autoconfig.php last ; location / { proxy_pass http : // 127.0.0.1 : 8080 / ; proxy_set_header Host $http_host ; proxy_set_header X-Real-IP $remote_addr ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_set_header X-Forwarded-Proto $scheme ; client_max_body_size 0 ; } } server { listen 443 ; server_name CHANGE_TO_MAILCOW_HOSTNAME autodiscover.* autoconfig.* ; ssl on ; ssl_certificate MAILCOW_PATH/data/assets/ssl/cert.pem ; ssl_certificate_key MAILCOW_PATH/data/assets/ssl/key.pem ; ssl_protocols TLSv1 TLSv1.1 TLSv1.2 ; ssl_ciphers HIGH : ! aNULL :! MD5 ; location / { proxy_pass http : // 127.0.0.1 : 8080 / ; proxy_set_header Host $http_host ; proxy_set_header X-Real-IP $remote_addr ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_set_header X-Forwarded-Proto $scheme ; client_max_body_size 0 ; } }","title":"Nginx"},{"location":"firststeps-rp/#haproxy","text":"Important/Fixme : This example only forwards HTTPS traffic and does not use mailcows built-in ACME client. frontend https-in bind :::443 v4v6 ssl crt mailcow.pem default_backend mailcow backend mailcow option forwardfor http-request set-header X-Forwarded-Proto https if { ssl_fc } http-request set-header X-Forwarded-Proto http if !{ ssl_fc } server mailcow 127.0.0.1:8080 check","title":"HAProxy"},{"location":"firststeps-rp/#optional-post-hook-script-for-non-mailcow-acme-clients","text":"Using a local certbot (or any other ACME client) requires to restart some containers, you can do this with a post-hook script. Make sure you change the pathes accordingly: #!/bin/bash cp /etc/letsencrypt/live/my.domain.tld/fullchain.pem /opt/mailcow-dockerized/data/assets/ssl/cert.pem cp /etc/letsencrypt/live/my.domain.tld/privkey.pem /opt/mailcow-dockerized/data/assets/ssl/key.pem # Either restart... #postfix_c=$(docker ps -qaf name=postfix-mailcow) #dovecot_c=$(docker ps -qaf name=dovecot-mailcow) #nginx_c=$(docker ps -qaf name=nginx-mailcow) #docker restart ${postfix_c} ${dovecot_c} ${nginx_c} # ...or reload: docker exec $( docker ps -qaf name = postfix-mailcow ) postfix reload docker exec $( docker ps -qaf name = nginx-mailcow ) nginx -s reload docker exec $( docker ps -qaf name = dovecot-mailcow ) dovecot reload","title":"Optional: Post-hook script for non-mailcow ACME clients"},{"location":"firststeps-rspamd_ui/","text":"Rspamd ( https://rspamd.com/webui/ ) is an easy to use spam filtering tool presently installed with mailcow. Go to the mailcow web admin interface Navigate to the Access tab. (Configuration > Administration > Access) Modify the Rspamd UI password Go to https://${MAILCOW_HOSTNAME}/rspamd in a browser and log in! Additional configuration options and documentation can be found here : https://rspamd.com/webui/","title":"Rspamd Web UI"},{"location":"firststeps-snat/","text":"SNAT \u00b6 SNAT is used to change the source address of the packets sent by mailcow. It can be used to change the outgoing IP on systems with multiple IP addresses. Open mailcow.conf , set either or both of the following parameters: # Use this IPv4 for outgoing connections (SNAT) SNAT_TO_SOURCE=1.2.3.4 # Use this IPv6 for outgoing connections (SNAT) SNAT6_TO_SOURCE=dead:beef Run docker-compose up -d . The values are read by netfilter-mailcow. netfilter-mailcow will make sure, the post-routing rules are on position 1 in the netfilter table. It does automatically delete and re-create them if they are found on another position than 1. Check the output of docker-compose logs --tail=200 netfilter-mailcow to ensure the SNAT settings have been applied.","title":"SNAT"},{"location":"firststeps-snat/#snat","text":"SNAT is used to change the source address of the packets sent by mailcow. It can be used to change the outgoing IP on systems with multiple IP addresses. Open mailcow.conf , set either or both of the following parameters: # Use this IPv4 for outgoing connections (SNAT) SNAT_TO_SOURCE=1.2.3.4 # Use this IPv6 for outgoing connections (SNAT) SNAT6_TO_SOURCE=dead:beef Run docker-compose up -d . The values are read by netfilter-mailcow. netfilter-mailcow will make sure, the post-routing rules are on position 1 in the netfilter table. It does automatically delete and re-create them if they are found on another position than 1. Check the output of docker-compose logs --tail=200 netfilter-mailcow to ensure the SNAT settings have been applied.","title":"SNAT"},{"location":"firststeps-ssl/","text":"Let's Encrypt (out-of-the-box) \u00b6 The newly introduced \"acme-mailcow\" container (21st of June) will try to obtain a valid LE certificate for you. Warning mailcow must be available on port 80 for the acme-client to work. By default, which means 0 domains are added to mailcow, it will try to obtain a certificate for ${MAILCOW_HOSTNAME}. For each domain you add, it will try to resolve autodiscover.ADDED_MAIL_DOMAIN and autoconfig.ADDED_MAIL_DOMAIN to your servers IPv4 address. If it succeeds, these names will be added as SANs to the certificate request. You can skip the IP verification by adding SKIP_IP_CHECK=y to mailcow.conf (no quotes). Be warned that a misconfiguration will get you ratelimited by Let's Encrypt! This is primarily useful for multi-IP setups where the IP check would return the incorrect source IP. Due to using dynamic IPs for acme-mailcow, source NAT is not consistent over restarts. You could add an A record for \"autodiscover\" but omit \"autoconfig\", the client will only validate \"autodiscover\" and skip \"autoconfig\" then. For every domain you remove, the certificate will be moved and a new certificate will be requested. It is not possible to keep domains in a certificate, when we are not able validate the challenge for those. If you want to re-run the ACME client, use docker-compose restart acme-mailcow . Additional domain names \u00b6 Edit \"mailcow.conf\" and add a parameter \"ADDITIONAL_SAN\" like this: Info Make sure you are using acme-mailcow:1.5 or above in docker-compose.yml - if not, update mailcow first! Do not use quotes ( \" )! ADDITIONAL_SAN=cert1.example.org,cert1.example.com,cert2.example.org,cert3.example.org Each name will be validated against its IPv4 address. Run docker-compose up -d to recreate changed containers. Skip Let's Encrypt function Change SKIP_LETS_ENCRYPT=y in mailcow.conf and restart the stack by running docker-compose down && docker-compose up -d . Use own certificates \u00b6 To use your own certificates, just save the combined certificate (containing the certificate and intermediate CA/CA if any) to data/assets/ssl/cert.pem and the corresponding key to data/assets/ssl/key.pem . Restart changed containers by running docker-compose up -d . Check your configuration \u00b6 Run docker-compose logs acme-mailcow to find out why a validation fails. To check if nginx serves the correct certificate, simply use a browser of your choice and check the displayed certificate. To check the certificate served by dovecot or postfix we will use openssl : # Connect via SMTP (25) openssl s_client -starttls smtp -crlf -connect mx.mailcow.email:25 # Connect via SMTPS (465) openssl s_client -showcerts -connect mx.mailcow.email:465 # Connect via SUBMISSION (587) openssl s_client -starttls smtp -crlf -connect mx.mailcow.email:587","title":"SSL"},{"location":"firststeps-ssl/#lets-encrypt-out-of-the-box","text":"The newly introduced \"acme-mailcow\" container (21st of June) will try to obtain a valid LE certificate for you. Warning mailcow must be available on port 80 for the acme-client to work. By default, which means 0 domains are added to mailcow, it will try to obtain a certificate for ${MAILCOW_HOSTNAME}. For each domain you add, it will try to resolve autodiscover.ADDED_MAIL_DOMAIN and autoconfig.ADDED_MAIL_DOMAIN to your servers IPv4 address. If it succeeds, these names will be added as SANs to the certificate request. You can skip the IP verification by adding SKIP_IP_CHECK=y to mailcow.conf (no quotes). Be warned that a misconfiguration will get you ratelimited by Let's Encrypt! This is primarily useful for multi-IP setups where the IP check would return the incorrect source IP. Due to using dynamic IPs for acme-mailcow, source NAT is not consistent over restarts. You could add an A record for \"autodiscover\" but omit \"autoconfig\", the client will only validate \"autodiscover\" and skip \"autoconfig\" then. For every domain you remove, the certificate will be moved and a new certificate will be requested. It is not possible to keep domains in a certificate, when we are not able validate the challenge for those. If you want to re-run the ACME client, use docker-compose restart acme-mailcow .","title":"Let's Encrypt (out-of-the-box)"},{"location":"firststeps-ssl/#additional-domain-names","text":"Edit \"mailcow.conf\" and add a parameter \"ADDITIONAL_SAN\" like this: Info Make sure you are using acme-mailcow:1.5 or above in docker-compose.yml - if not, update mailcow first! Do not use quotes ( \" )! ADDITIONAL_SAN=cert1.example.org,cert1.example.com,cert2.example.org,cert3.example.org Each name will be validated against its IPv4 address. Run docker-compose up -d to recreate changed containers. Skip Let's Encrypt function Change SKIP_LETS_ENCRYPT=y in mailcow.conf and restart the stack by running docker-compose down && docker-compose up -d .","title":"Additional domain names"},{"location":"firststeps-ssl/#use-own-certificates","text":"To use your own certificates, just save the combined certificate (containing the certificate and intermediate CA/CA if any) to data/assets/ssl/cert.pem and the corresponding key to data/assets/ssl/key.pem . Restart changed containers by running docker-compose up -d .","title":"Use own certificates"},{"location":"firststeps-ssl/#check-your-configuration","text":"Run docker-compose logs acme-mailcow to find out why a validation fails. To check if nginx serves the correct certificate, simply use a browser of your choice and check the displayed certificate. To check the certificate served by dovecot or postfix we will use openssl : # Connect via SMTP (25) openssl s_client -starttls smtp -crlf -connect mx.mailcow.email:25 # Connect via SMTPS (465) openssl s_client -showcerts -connect mx.mailcow.email:465 # Connect via SUBMISSION (587) openssl s_client -starttls smtp -crlf -connect mx.mailcow.email:587","title":"Check your configuration"},{"location":"firststeps-sync_jobs_migration/","text":"Sync jobs are used to copy or move existing emails from an external IMAP server or within mailcow's existing mailboxes. Info Depending on your mailbox's ACL you may not have the option to add a sync job. Please contact your domain administrator if so. Setup a Sync Job \u00b6 In the \"Mail Setup\" or \"User Settings\" interface, create a new sync job. If you are an administrator, select the username of the downstream mailcow mailbox in the \"Username\" dropdown. Fill in the \"Host\" and \"Port\" fields with their respective correct values from the upstream IMAP server. In the \"Username\" and 'Password\" fields, supply the correct access credentials from the upstream IMAP server. Select the \"Encryption Method\". If the upstream IMAP server uses port 143, it is likely that the encryption method is TLS and SSL for port 993. Nevertheless, you can use PLAIN authentication, but it is stongly discouraged. For all ther other fields, you can leave them as is or modify them as desired. Make sure to tick \"Active\" and click \"Add\". Info Once Completed, log into the mailbox and check if all emails are imported correctly. If all goes well, All your mails shall end up in your new mailbox. And don't forget to delete or deactivate the sync job after it is used.","title":"Sync Jobs Migration"},{"location":"firststeps-sync_jobs_migration/#setup-a-sync-job","text":"In the \"Mail Setup\" or \"User Settings\" interface, create a new sync job. If you are an administrator, select the username of the downstream mailcow mailbox in the \"Username\" dropdown. Fill in the \"Host\" and \"Port\" fields with their respective correct values from the upstream IMAP server. In the \"Username\" and 'Password\" fields, supply the correct access credentials from the upstream IMAP server. Select the \"Encryption Method\". If the upstream IMAP server uses port 143, it is likely that the encryption method is TLS and SSL for port 993. Nevertheless, you can use PLAIN authentication, but it is stongly discouraged. For all ther other fields, you can leave them as is or modify them as desired. Make sure to tick \"Active\" and click \"Add\". Info Once Completed, log into the mailbox and check if all emails are imported correctly. If all goes well, All your mails shall end up in your new mailbox. And don't forget to delete or deactivate the sync job after it is used.","title":"Setup a Sync Job"},{"location":"install-update/","text":"Automatic update \u00b6 There is an update script in your /opt/openemail directory will take care of updates. But use it with caution! If you think you made a lot of changes to the openemail code, you should use the manual update guide below. Run the update script: sudo su - cd /opt/openemail ./update.sh If it needs to, it will ask you how you wish to proceed. Merge errors will be reported. Some minor conflicts will be auto-corrected (in favour for the openemail repository code). Update options \u00b6 Check for updates ./update.sh --check Update with merge strategy ours instead of theirs This will merge in favor for your local changes. ./update.sh --ours Manual update \u00b6 Step 1 \u00b6 You may want to backup your certificates, as an upgrade from an older openemail version may remove these files: cp -rp data/assets/ssl /tmp/ssl_backup_openemail Fetch new data from GitHub, commit changes and merge remote repository:``` 1. Get updates/changes git fetch origin master 2. Add all changed files to local clone git add -A 3. Commit changes, ignore git complaining about username and mail address git commit -m \"Local config at $(date)\" 4. Merge changes, prefer openemail repository, replace \"theirs\" by \"ours\" to change merge strategy git merge -Xtheirs -Xpatience 5. If it conflicts with files that were deleted from the openemail repository, just run... git status --porcelain | grep -E \"UD|DU\" | awk '{print $2}' | xargs rm -v 6. Repeat step 2 and 3 7. Check data/assets/ssl for your certificates (and dhparams.pem). If you miss them, recover your files: cp -rp /tmp/ssl_backup_openemail/* data/assets/ssl/ Step 2 \u00b6 Clean-up dangling (unused) images and volumes: It is very important to not run these commands when your containers are deleted. Running docker-compose down - for example - will delete your containers. Your volumes are now in a dangling state! Running the commands shown below, will remove your volumes and therefore your data. docker rmi -f $(docker images -f \"dangling=true\" -q) docker volume rm $(docker volume ls -qf dangling=true) Footnotes \u00b6 At the moment there is no release cycle regarding updates.","title":"Update"},{"location":"install-update/#automatic-update","text":"There is an update script in your /opt/openemail directory will take care of updates. But use it with caution! If you think you made a lot of changes to the openemail code, you should use the manual update guide below. Run the update script: sudo su - cd /opt/openemail ./update.sh If it needs to, it will ask you how you wish to proceed. Merge errors will be reported. Some minor conflicts will be auto-corrected (in favour for the openemail repository code).","title":"Automatic update"},{"location":"install-update/#update-options","text":"Check for updates ./update.sh --check Update with merge strategy ours instead of theirs This will merge in favor for your local changes. ./update.sh --ours","title":"Update options"},{"location":"install-update/#manual-update","text":"","title":"Manual update"},{"location":"install-update/#step-1","text":"You may want to backup your certificates, as an upgrade from an older openemail version may remove these files: cp -rp data/assets/ssl /tmp/ssl_backup_openemail Fetch new data from GitHub, commit changes and merge remote repository:``` 1. Get updates/changes git fetch origin master 2. Add all changed files to local clone git add -A 3. Commit changes, ignore git complaining about username and mail address git commit -m \"Local config at $(date)\" 4. Merge changes, prefer openemail repository, replace \"theirs\" by \"ours\" to change merge strategy git merge -Xtheirs -Xpatience 5. If it conflicts with files that were deleted from the openemail repository, just run... git status --porcelain | grep -E \"UD|DU\" | awk '{print $2}' | xargs rm -v 6. Repeat step 2 and 3 7. Check data/assets/ssl for your certificates (and dhparams.pem). If you miss them, recover your files: cp -rp /tmp/ssl_backup_openemail/* data/assets/ssl/","title":"Step 1"},{"location":"install-update/#step-2","text":"Clean-up dangling (unused) images and volumes: It is very important to not run these commands when your containers are deleted. Running docker-compose down - for example - will delete your containers. Your volumes are now in a dangling state! Running the commands shown below, will remove your volumes and therefore your data. docker rmi -f $(docker images -f \"dangling=true\" -q) docker volume rm $(docker volume ls -qf dangling=true)","title":"Step 2"},{"location":"install-update/#footnotes","text":"At the moment there is no release cycle regarding updates.","title":"Footnotes"},{"location":"install/","text":"Warning Make sure you've read \"Prepare Your System\" before proceeding! You need to install Docker and Docker Compose to setup openemail for your domain. This section will help you to learn how to install Docker and Docker Compose . Installing Docker Community Edition on Ubuntu \u00b6 To install Docker CE, you need the 64-bit version of one of these Ubuntu versions: Cosmic 18.10 Bionic 18.04 (LTS) Xenial 16.04 (LTS) In this guide I am using Bionic 18.04 (LTS) Uninstall old versions Older versions of Docker were called docker, docker.io , or docker-engine. If these are installed, uninstall them: sudo apt-get remove docker docker-engine docker.io containerd runc Install using the repository Before you install Docker CE for the first time on a new host machine, you need to set up the Docker repository. Afterward, you can install and update Docker from the repository. Setup the repository 1. Update the apt package index: sudo apt-get update 2. install packages to allow apt to use a repository over HTTPS: sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common 3. Add Docker\u2019s official GPG key: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - Verify that you now have the key with the fingerprint 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88, by searching for the last 8 characters of the fingerprint. sudo apt-key fingerprint 0EBFCD88 You should get an output like below. pub rsa4096 2017-02-22 [SCEA] 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 uid [ unknown] Docker Release (CE deb) <docker@docker.com> sub rsa4096 2017-02-22 [S] 4. Use the following command to set up the stable repository. sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" Install docker-ce 1. Update the apt package index. sudo apt-get update 2. Install the latest version of Docker CE and containerd. sudo apt-get install docker-ce docker-ce-cli containerd.io 3. Verify that Docker CE is installed correctly by running the hello-world image. sudo docker run hello-world This command downloads a test image and runs it in a container. When the container runs, it prints an informational message and exits. Note If you are planing to use CentOS as your openemai docker host please follow the official CentOS docker-ce Installation Guide Install Docker Compose on Linux systems \u00b6 On Linux, you can download the Docker Compose binary from the Compose repository release page on GitHub . Follow the instructions from the link, which involve running the curl command in your terminal to download the binaries. These step by step instructions are also included below. Note If the command docker-compose fails after installation, check your path. You can also create a symbolic link to /usr/bin or any other directory in your path. For example: sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose 3. Test your installation docker-compose --version Cloning openemail repository \u00b6 Clone the master branch of the repository, make sure your umask equals 0022. sudo su - umask cd /opt git clone https://github.com/openemail/openemail.git cd openemail Generating openemail.conf \u00b6 Generate a configuration file. Use a FQDN ( host.domain.tld ) as hostname when asked. ./generate_config.sh Customize the configuration \u00b6 Change configuration if you want or need to. nano openemail.conf If you plan to use a reverse proxy, you can, for example, bind HTTPS to 127.0.0.1 on port 8443 and HTTP to 127.0.0.1 on port 8080. You may need to stop an existing pre-installed MTA which blocks port 25/tcp. See this chapter to learn how to reconfigure Postfix to run besides mailcow after a successful installation. Setup MTU \u00b6 OpenStack users and users with a MTU not equal to 1500: Edit docker-compose.yml and change the network settings according to your MTU. Add the new driver_opts parameter like this: networks : openemail - network : ... driver_opts : com . docker . network . driver . mtu : 1450 ... Pull openemail docker images \u00b6 Pull the images and run the composer file. The parameter -d will start openemail docker containers detached: docker-compose pull docker-compose up -d Accessing openemail UI \u00b6 You can now access https://${OPENEMAIL_HOSTNAME} with the default credentials admin + password openemail . The database will be initialized right after a connection to MySQL can be established. Done!","title":"Installation"},{"location":"install/#installing-docker-community-edition-on-ubuntu","text":"To install Docker CE, you need the 64-bit version of one of these Ubuntu versions: Cosmic 18.10 Bionic 18.04 (LTS) Xenial 16.04 (LTS) In this guide I am using Bionic 18.04 (LTS) Uninstall old versions Older versions of Docker were called docker, docker.io , or docker-engine. If these are installed, uninstall them: sudo apt-get remove docker docker-engine docker.io containerd runc Install using the repository Before you install Docker CE for the first time on a new host machine, you need to set up the Docker repository. Afterward, you can install and update Docker from the repository. Setup the repository 1. Update the apt package index: sudo apt-get update 2. install packages to allow apt to use a repository over HTTPS: sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common 3. Add Docker\u2019s official GPG key: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - Verify that you now have the key with the fingerprint 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88, by searching for the last 8 characters of the fingerprint. sudo apt-key fingerprint 0EBFCD88 You should get an output like below. pub rsa4096 2017-02-22 [SCEA] 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 uid [ unknown] Docker Release (CE deb) <docker@docker.com> sub rsa4096 2017-02-22 [S] 4. Use the following command to set up the stable repository. sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" Install docker-ce 1. Update the apt package index. sudo apt-get update 2. Install the latest version of Docker CE and containerd. sudo apt-get install docker-ce docker-ce-cli containerd.io 3. Verify that Docker CE is installed correctly by running the hello-world image. sudo docker run hello-world This command downloads a test image and runs it in a container. When the container runs, it prints an informational message and exits. Note If you are planing to use CentOS as your openemai docker host please follow the official CentOS docker-ce Installation Guide","title":"Installing Docker Community Edition on Ubuntu"},{"location":"install/#install-docker-compose-on-linux-systems","text":"On Linux, you can download the Docker Compose binary from the Compose repository release page on GitHub . Follow the instructions from the link, which involve running the curl command in your terminal to download the binaries. These step by step instructions are also included below. Note If the command docker-compose fails after installation, check your path. You can also create a symbolic link to /usr/bin or any other directory in your path. For example: sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose 3. Test your installation docker-compose --version","title":"Install Docker Compose on Linux systems"},{"location":"install/#cloning-openemail-repository","text":"Clone the master branch of the repository, make sure your umask equals 0022. sudo su - umask cd /opt git clone https://github.com/openemail/openemail.git cd openemail","title":"Cloning openemail repository"},{"location":"install/#generating-openemailconf","text":"Generate a configuration file. Use a FQDN ( host.domain.tld ) as hostname when asked. ./generate_config.sh","title":"Generating openemail.conf"},{"location":"install/#customize-the-configuration","text":"Change configuration if you want or need to. nano openemail.conf If you plan to use a reverse proxy, you can, for example, bind HTTPS to 127.0.0.1 on port 8443 and HTTP to 127.0.0.1 on port 8080. You may need to stop an existing pre-installed MTA which blocks port 25/tcp. See this chapter to learn how to reconfigure Postfix to run besides mailcow after a successful installation.","title":"Customize the configuration"},{"location":"install/#setup-mtu","text":"OpenStack users and users with a MTU not equal to 1500: Edit docker-compose.yml and change the network settings according to your MTU. Add the new driver_opts parameter like this: networks : openemail - network : ... driver_opts : com . docker . network . driver . mtu : 1450 ...","title":"Setup MTU"},{"location":"install/#pull-openemail-docker-images","text":"Pull the images and run the composer file. The parameter -d will start openemail docker containers detached: docker-compose pull docker-compose up -d","title":"Pull openemail docker images"},{"location":"install/#accessing-openemail-ui","text":"You can now access https://${OPENEMAIL_HOSTNAME} with the default credentials admin + password openemail . The database will be initialized right after a connection to MySQL can be established. Done!","title":"Accessing openemail UI"},{"location":"model-acl/","text":"Editing a domain administrator or a mailbox user allows to set restrictions to that account. Important : For overlapping modules like sync jobs, which both domain administrators and mailbox users can be granted access to, the domain administrators permissions are inherited, when logging in as mailbox user. Some examples: 1. A domain administror has not access to sync jobs but can login as mailbox user When logging in as mailbox user, he does not gain access to sync jobs, even if the given mailbox user has access when logging in directly 2. A domain administror has access to sync jobs and can login as mailbox user The mailbox user he tries to login as has not access to sync jobs The domain administrator, now logged in as mailbox user, inherits its permission to the mailbox user and can access sync jobs 3. A domain administrator logs in as mailbox user Every permission, that does not exist in a domain administrators ACL, is automatically granted (example: time-limited alias, TLS policy etc.)","title":"ACL"},{"location":"model-sender_rcv/","text":"When a mailbox is created, a user is allowed to send mail from and receive mail for his own mailbox address. Mailbox me@example.org is created. example.org is a primary domain. Note: a mailbox cannot be created in an alias domain. me@example.org is only known as me@example.org. me@example.org is allowed to send as me@example.org. We can add an alias domain for example.org: Alias domain alias.com is added and assigned to primary domain example.org. me@example.org is now known as me@example.org and me@alias.com. me@example.org is now allowed to send as me@example.org and me@alias.com. We can add aliases for a mailbox to receive mail for and to send from this new address. It is important to know, that you are not able to receive mail for my-alias@my-alias-domain.tld . You would need to create this particular alias. me@example.org is assigned the alias alias@example.org me@example.org is now known as me@example.org, me@alias.com, alias@example.org me@example.org is NOT known as alias@alias.com. Please note that this does not apply to catch-all aliases: Alias domain alias.com is added and assigned to primary domain example.org me@example.org is assigned the catch-all alias @example.org me@example.org is still just known as me@example.org, which is the only available send-as option Any email send to alias.com will match the catch-all alias for example.org Administrators and domain administrators can edit mailboxes to allow specific users to send as other mailbox users (\"delegate\" them). You can choose between mailbox users or completely disable the sender check for domains. SOGo \"mail from\" addresses \u00b6 Mailbox users can, obviously, select their own mailbox address, as well as all alias addresses and aliases that exist through alias domains. If you want to select another existing mailbox user as your \"mail from\" address, this user has to delegate you access through SOGo (see SOGo documentation). Moreover a mailcow (domain) administrator needs to grant you access as described above.","title":"Sender and receiver model"},{"location":"model-sender_rcv/#sogo-mail-from-addresses","text":"Mailbox users can, obviously, select their own mailbox address, as well as all alias addresses and aliases that exist through alias domains. If you want to select another existing mailbox user as your \"mail from\" address, this user has to delegate you access through SOGo (see SOGo documentation). Moreover a mailcow (domain) administrator needs to grant you access as described above.","title":"SOGo \"mail from\" addresses"},{"location":"prerequisite-dns/","text":"DNS and Email security \u00b6 DNS infrastructure of the Internet plays a major role in email security today. Proper DNS setup for your email domain requires prior to setting up openemail for your domain. This section of the document guides you in setting up recommended DNS records . While some are mandatory for a mail server (A, MX), others are recommended to build a good reputation score (TXT/SPF) or used for auto-configuration of mail clients (SRV). Setting up MX records \u00b6 Querying for existing MX records \u00b6 Let's first first find your MX records by running the dig command in your Linux system. Run the following query to view the MX records for an eample domain openemail.io . Simply change this domain to your domains to query MX for your domain. dig openemail.io MX +short You will get an output like below. 15 hasuna.openemail.io. 10 mail.openemail.io. According to the above output the domain openemal.io has two MX records. The numbers 10 and 15 are respective MX priorities. Sample MX Records \u00b6 Use the below sample records to setup your MX Records @ IN MX 10 maila.yourdomain.tld @ IN MX 20 mailb.yourdomain.tld The numbers 10 and 20 are the respective MX priorities which are used in delivering the mails. The MX records with lower priority will receive mails first. Sample A records for MX IPS \u00b6 Next you need to setup A records for your MX. Below is a Sample @ IN A maila 1.2.3.4 @ IN A mailb 4.5.6.7 Reverse DNS for your MX IPs \u00b6 Make sure that the PTR record of your IP matches the FQDN of your openemal host: ${OPENEMAIL_HOSTNAME} 1 . This record is usually set at the provider you leased the IP (server) from. To find the IP of your MX run: \u00b6 Below is an example dig mail.openemail.io +short The above query should return an IP address like below. 68.183.186.231 To find your PTR record run: \u00b6 host 68.183.186.231 You will get an output like Below 231.186.183.68.in-addr.arpa domain name pointer mail.openemail.io Sample PTR Records \u00b6 4.3.2.1.in-addr.arpa IN PTR maila.yourdomain.tld. 7.6.5.4.in-addr.arpa. IN PTR mailb.yourdomain.tld. Setting up SPF Records \u00b6 Set up SPF to prevent spammers from sending unauthorized emails from your domain. This type of spamming is called spoofing. Sender Policy Framework (SPF) is an email security method to prevent spoofing from your domain. Spoofing is a common unauthorized use of email, so some email servers require SPF. If you don't set up SPF for your domain, messages could bounce or could be marked as spam. An SPF record is a TXT record that lists the mail servers that are allowed to send email from your domain. Messages sent from a server that isn't the SPF record might be marked as spam. Adding the TXT record doesn\u2019t affect your mail flow. Sample SPF record \u00b6 @ IN TXT \"v=spf1 mx -all\" Using \"v=spf1 mx -all\" authorizes any IP that is also a MX for the sending domain. If you use ~all ,it means softfail which allows mail whether or not it matches the parameters in the record. Please refer to SPF Project for further reading. Querying for SPF Records \u00b6 @ IN TXT \"v=spf1 mx -all\" To find out your current SPF settings run: \u00b6 $ dig TXT openemail.io +short You will get an output like below. \"v=spf1 mx -all\" Setting UP DKIM Record \u00b6 Use the DomainKeys Identified Mail (DKIM) standard to help prevent email spoofing on outgoing messages. Email spoofing is when email content is changed to make the message appear from someone or somewhere other than the actual source. Spoofing is a common unauthorized use of email, so some email servers require DKIM to prevent email spoofing. DKIM adds an encrypted signature to the header of all outgoing messages. Email servers that get these messages use DKIM to decrypt the message header, and verify the message was not changed after it was sent. Creating a DKIM key and DNS records \u00b6 It is highly recommended to create a DKIM TXT record in your **openemal UI## and set the corresponding TXT record in your DNS records. Please refer to OpenDKIM for further reading. Creating DKIM key in openemail UI \u00b6 Do the following steps which are marked in red color in the configuration window screenshot of openemail-UI below. 1. Click on Select domains with missing keys to select your domain. 2. Set dkim key length as 2048 3. Leave the DKIM selector as it is 4. Press Add button Using OpenDKIM \u00b6 The below steps can be used to create DKIM key in you Linux command line in case if you are using your own mail server like postfix. You do not need to execute commands below when you deploy openemal . We have listed those commands to understand how the postfix back-end has been configured for DKIM validations. Install required tools sudo apt-get install opendkim opendkim-tools Create the _domainkey Now create DKIM key pair using opendkim-genkey command line utility. For this guide we are using domain name openemail.io , Change this name with your actual domain name. mkdir -p dkim-keys/openemail.io cd dkim-keys/openemail.io opendkim-genkey -t -s dkim -d openemail.io cat dkim.txt You will get an output like below. It is actually the TXT record for bind and compatible DNS servers. dkim._domainkey IN TXT ( \"v=DKIM1; h=sha256; k=rsa; t=y; \" \"p=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtIfYQWd16SotLpDAIe+9CRda6+KmExTSM4lQsO8XsbJsECqEuUer+xrJTVA4N5tEM53MeuH36tCjsKynlKMKmNQtMpblg3fHL0Z57FUyAUoHO9GOK1lS8vOA5wbf68FQ06YHAd/Dgq21/sYrERnnXYVvH5jSA44YBfiwrvuzopl/ekMp71WJMR73TmEQ1BTf6SZA6STvCJVj8d\" \"pAuLekL1EYQzsGsp1kcOFYOee9c9VjfgkuZnJkAkQmz94L3YTd/08i6rZrKUSRXcx8dfitx7k12IrBsKCqlXgRIpWYWJW58gAM1Fif6gjDmugj4mAIQJ4oyWJdNDZPYpKEG+6VQQIDAQAB\" ) ; ----- DKIM key dkim for openemail.io Setup DMARC record \u00b6 DMARC defines how your domain handles suspicious emails. Spammers can forge the \"From\" address on email messages to make messages appear to come from someone in your domain. If spammers use your domain to send spam or junk email, your domain quality is negatively affected. People who get the forged emails can mark them as spam or junk, which can impact authentic messages sent from your domain. Use DMARC to define the policy for how openemail handles spam emails that appear to be sent from your domain. Learn more about DMARC . Sample DMARC record \u00b6 You can setup a TXT record for your domains' DMARC using the example below. _dmarc IN TXT \"v=DMARC1; p=quarantine; pct=5; rua=mailto:postmaster@yourdomain.tld\" Following are the descriptions of the parameters used in the above record. p - Policy for organizational domain pct - Percentage of messages subjected to filtering rua - Reporting URI of aggregate reports To query DNS for an existing entry you can run: dig TXT _dmarc.openemail.io +short You will get an output like below. \"v=DMARC1; p=quarantine; pct=5; rua=mailto:postmaster@openemail.io\" The Advanced DNS configuration \u00b6 SRV records specify the server(s) for a specific protocol on your domain. If you want to explicitly announce a service as not provided, give \".\" as the target address (instead of \"mail.yourdomain.tld.\"). Please refer to RFC 2782 . for more details. _imap._tcp IN SRV 0 1 143 mail.yourdomain.tld. _imaps._tcp IN SRV 0 1 993 mail.yourdomain.tld. _pop3._tcp IN SRV 0 1 110 mail.yourdomain.tld. _pop3s._tcp IN SRV 0 1 995 mail.yourdomain.tld. _submission._tcp IN SRV 0 1 587 mail.yourdomain.tld. _smtps._tcp IN SRV 0 1 465 mail.yourdomain.tld. _sieve._tcp IN SRV 0 1 4190 mail.yourdomain.tld. _autodiscover._tcp IN SRV 0 1 443 mail.yourdomain.tld. _carddavs._tcp IN SRV 0 1 443 mail.yourdomain.tld. _carddavs._tcp IN TXT \"path=/SOGo/dav/\" _caldavs._tcp IN SRV 0 1 443 mail.yourdomain.tld. _caldavs._tcp IN TXT \"path=/SOGo/dav/\" Testing for SPF, DKIM, and DMARC \u00b6 Here are some tools you can use to verify your DNS configuration: MX Toolbox (DNS, SMTP, RBL) port25.com (DKIM, SPF) Mail-tester (DKIM, DMARC, SPF) DMARC Analyzer (DMARC, SPF) Getting additional statistics \u00b6 If you are interested in statistics, you can additionally register with the Postmaster Tool by Google and supply a google-site-verification TXT record, which will give you details about spam-classified mails by your domain. This is clearly optional. You can add a TXT records in your DNS server like the one below. @ IN TXT \"google-site-verification=...\" Additional References \u00b6 A good article covering all relevant topics: \"3 DNS Records Every Email Marketer Must Know\" Another great one, but Zimbra as an example platform: \"Best Practices on Email Protection: SPF, DKIM and DMARC\" An in-depth discussion of SPF, DKIM and DMARC: \"How to eliminate spam and protect your name with DMARC\" A Fully Qualified Domain Name ( FQDN ) is the complete (absolute) domain name for a specific computer or host, on the Internet. The FQDN consists of at least three parts divided by a dot: the hostname (myhost), the domain name (mydomain) and the top level domain in short tld (com). In the example of mx.openemail.io the hostname would be mx , the domain name 'openemal' and the tld is io . \u21a9","title":"DNS Setup"},{"location":"prerequisite-dns/#dns-and-email-security","text":"DNS infrastructure of the Internet plays a major role in email security today. Proper DNS setup for your email domain requires prior to setting up openemail for your domain. This section of the document guides you in setting up recommended DNS records . While some are mandatory for a mail server (A, MX), others are recommended to build a good reputation score (TXT/SPF) or used for auto-configuration of mail clients (SRV).","title":"DNS and Email security"},{"location":"prerequisite-dns/#setting-up-mx-records","text":"","title":"Setting up MX records"},{"location":"prerequisite-dns/#querying-for-existing-mx-records","text":"Let's first first find your MX records by running the dig command in your Linux system. Run the following query to view the MX records for an eample domain openemail.io . Simply change this domain to your domains to query MX for your domain. dig openemail.io MX +short You will get an output like below. 15 hasuna.openemail.io. 10 mail.openemail.io. According to the above output the domain openemal.io has two MX records. The numbers 10 and 15 are respective MX priorities.","title":"Querying for existing MX records"},{"location":"prerequisite-dns/#sample-mx-records","text":"Use the below sample records to setup your MX Records @ IN MX 10 maila.yourdomain.tld @ IN MX 20 mailb.yourdomain.tld The numbers 10 and 20 are the respective MX priorities which are used in delivering the mails. The MX records with lower priority will receive mails first.","title":"Sample MX Records"},{"location":"prerequisite-dns/#sample-a-records-for-mx-ips","text":"Next you need to setup A records for your MX. Below is a Sample @ IN A maila 1.2.3.4 @ IN A mailb 4.5.6.7","title":"Sample A records for MX  IPS"},{"location":"prerequisite-dns/#reverse-dns-for-your-mx-ips","text":"Make sure that the PTR record of your IP matches the FQDN of your openemal host: ${OPENEMAIL_HOSTNAME} 1 . This record is usually set at the provider you leased the IP (server) from.","title":"Reverse DNS for your MX IPs"},{"location":"prerequisite-dns/#to-find-the-ip-of-your-mx-run","text":"Below is an example dig mail.openemail.io +short The above query should return an IP address like below. 68.183.186.231","title":"To find the IP of your MX run:"},{"location":"prerequisite-dns/#to-find-your-ptr-record-run","text":"host 68.183.186.231 You will get an output like Below 231.186.183.68.in-addr.arpa domain name pointer mail.openemail.io","title":"To find your PTR record run:"},{"location":"prerequisite-dns/#sample-ptr-records","text":"4.3.2.1.in-addr.arpa IN PTR maila.yourdomain.tld. 7.6.5.4.in-addr.arpa. IN PTR mailb.yourdomain.tld.","title":"Sample PTR Records"},{"location":"prerequisite-dns/#setting-up-spf-records","text":"Set up SPF to prevent spammers from sending unauthorized emails from your domain. This type of spamming is called spoofing. Sender Policy Framework (SPF) is an email security method to prevent spoofing from your domain. Spoofing is a common unauthorized use of email, so some email servers require SPF. If you don't set up SPF for your domain, messages could bounce or could be marked as spam. An SPF record is a TXT record that lists the mail servers that are allowed to send email from your domain. Messages sent from a server that isn't the SPF record might be marked as spam. Adding the TXT record doesn\u2019t affect your mail flow.","title":"Setting up SPF Records"},{"location":"prerequisite-dns/#sample-spf-record","text":"@ IN TXT \"v=spf1 mx -all\" Using \"v=spf1 mx -all\" authorizes any IP that is also a MX for the sending domain. If you use ~all ,it means softfail which allows mail whether or not it matches the parameters in the record. Please refer to SPF Project for further reading.","title":"Sample SPF record"},{"location":"prerequisite-dns/#querying-for-spf-records","text":"@ IN TXT \"v=spf1 mx -all\"","title":"Querying for SPF Records"},{"location":"prerequisite-dns/#to-find-out-your-current-spf-settings-run","text":"$ dig TXT openemail.io +short You will get an output like below. \"v=spf1 mx -all\"","title":"To find out your current SPF settings run:"},{"location":"prerequisite-dns/#setting-up-dkim-record","text":"Use the DomainKeys Identified Mail (DKIM) standard to help prevent email spoofing on outgoing messages. Email spoofing is when email content is changed to make the message appear from someone or somewhere other than the actual source. Spoofing is a common unauthorized use of email, so some email servers require DKIM to prevent email spoofing. DKIM adds an encrypted signature to the header of all outgoing messages. Email servers that get these messages use DKIM to decrypt the message header, and verify the message was not changed after it was sent.","title":"Setting UP DKIM Record"},{"location":"prerequisite-dns/#creating-a-dkim-key-and-dns-records","text":"It is highly recommended to create a DKIM TXT record in your **openemal UI## and set the corresponding TXT record in your DNS records. Please refer to OpenDKIM for further reading.","title":"Creating a DKIM key and DNS records"},{"location":"prerequisite-dns/#creating-dkim-key-in-openemail-ui","text":"Do the following steps which are marked in red color in the configuration window screenshot of openemail-UI below. 1. Click on Select domains with missing keys to select your domain. 2. Set dkim key length as 2048 3. Leave the DKIM selector as it is 4. Press Add button","title":"Creating DKIM key in openemail UI"},{"location":"prerequisite-dns/#using-opendkim","text":"The below steps can be used to create DKIM key in you Linux command line in case if you are using your own mail server like postfix. You do not need to execute commands below when you deploy openemal . We have listed those commands to understand how the postfix back-end has been configured for DKIM validations. Install required tools sudo apt-get install opendkim opendkim-tools Create the _domainkey Now create DKIM key pair using opendkim-genkey command line utility. For this guide we are using domain name openemail.io , Change this name with your actual domain name. mkdir -p dkim-keys/openemail.io cd dkim-keys/openemail.io opendkim-genkey -t -s dkim -d openemail.io cat dkim.txt You will get an output like below. It is actually the TXT record for bind and compatible DNS servers. dkim._domainkey IN TXT ( \"v=DKIM1; h=sha256; k=rsa; t=y; \" \"p=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtIfYQWd16SotLpDAIe+9CRda6+KmExTSM4lQsO8XsbJsECqEuUer+xrJTVA4N5tEM53MeuH36tCjsKynlKMKmNQtMpblg3fHL0Z57FUyAUoHO9GOK1lS8vOA5wbf68FQ06YHAd/Dgq21/sYrERnnXYVvH5jSA44YBfiwrvuzopl/ekMp71WJMR73TmEQ1BTf6SZA6STvCJVj8d\" \"pAuLekL1EYQzsGsp1kcOFYOee9c9VjfgkuZnJkAkQmz94L3YTd/08i6rZrKUSRXcx8dfitx7k12IrBsKCqlXgRIpWYWJW58gAM1Fif6gjDmugj4mAIQJ4oyWJdNDZPYpKEG+6VQQIDAQAB\" ) ; ----- DKIM key dkim for openemail.io","title":"Using OpenDKIM"},{"location":"prerequisite-dns/#setup-dmarc-record","text":"DMARC defines how your domain handles suspicious emails. Spammers can forge the \"From\" address on email messages to make messages appear to come from someone in your domain. If spammers use your domain to send spam or junk email, your domain quality is negatively affected. People who get the forged emails can mark them as spam or junk, which can impact authentic messages sent from your domain. Use DMARC to define the policy for how openemail handles spam emails that appear to be sent from your domain. Learn more about DMARC .","title":"Setup DMARC record"},{"location":"prerequisite-dns/#sample-dmarc-record","text":"You can setup a TXT record for your domains' DMARC using the example below. _dmarc IN TXT \"v=DMARC1; p=quarantine; pct=5; rua=mailto:postmaster@yourdomain.tld\" Following are the descriptions of the parameters used in the above record. p - Policy for organizational domain pct - Percentage of messages subjected to filtering rua - Reporting URI of aggregate reports To query DNS for an existing entry you can run: dig TXT _dmarc.openemail.io +short You will get an output like below. \"v=DMARC1; p=quarantine; pct=5; rua=mailto:postmaster@openemail.io\"","title":"Sample DMARC record"},{"location":"prerequisite-dns/#the-advanced-dns-configuration","text":"SRV records specify the server(s) for a specific protocol on your domain. If you want to explicitly announce a service as not provided, give \".\" as the target address (instead of \"mail.yourdomain.tld.\"). Please refer to RFC 2782 . for more details. _imap._tcp IN SRV 0 1 143 mail.yourdomain.tld. _imaps._tcp IN SRV 0 1 993 mail.yourdomain.tld. _pop3._tcp IN SRV 0 1 110 mail.yourdomain.tld. _pop3s._tcp IN SRV 0 1 995 mail.yourdomain.tld. _submission._tcp IN SRV 0 1 587 mail.yourdomain.tld. _smtps._tcp IN SRV 0 1 465 mail.yourdomain.tld. _sieve._tcp IN SRV 0 1 4190 mail.yourdomain.tld. _autodiscover._tcp IN SRV 0 1 443 mail.yourdomain.tld. _carddavs._tcp IN SRV 0 1 443 mail.yourdomain.tld. _carddavs._tcp IN TXT \"path=/SOGo/dav/\" _caldavs._tcp IN SRV 0 1 443 mail.yourdomain.tld. _caldavs._tcp IN TXT \"path=/SOGo/dav/\"","title":"The Advanced DNS configuration"},{"location":"prerequisite-dns/#testing-for-spf-dkim-and-dmarc","text":"Here are some tools you can use to verify your DNS configuration: MX Toolbox (DNS, SMTP, RBL) port25.com (DKIM, SPF) Mail-tester (DKIM, DMARC, SPF) DMARC Analyzer (DMARC, SPF)","title":"Testing for SPF, DKIM, and DMARC"},{"location":"prerequisite-dns/#getting-additional-statistics","text":"If you are interested in statistics, you can additionally register with the Postmaster Tool by Google and supply a google-site-verification TXT record, which will give you details about spam-classified mails by your domain. This is clearly optional. You can add a TXT records in your DNS server like the one below. @ IN TXT \"google-site-verification=...\"","title":"Getting additional statistics"},{"location":"prerequisite-dns/#additional-references","text":"A good article covering all relevant topics: \"3 DNS Records Every Email Marketer Must Know\" Another great one, but Zimbra as an example platform: \"Best Practices on Email Protection: SPF, DKIM and DMARC\" An in-depth discussion of SPF, DKIM and DMARC: \"How to eliminate spam and protect your name with DMARC\" A Fully Qualified Domain Name ( FQDN ) is the complete (absolute) domain name for a specific computer or host, on the Internet. The FQDN consists of at least three parts divided by a dot: the hostname (myhost), the domain name (mydomain) and the top level domain in short tld (com). In the example of mx.openemail.io the hostname would be mx , the domain name 'openemal' and the tld is io . \u21a9","title":"Additional References"},{"location":"prerequisite-system/","text":"Before you run openemail , there are a few requirements that you should check: Warning When running openemail on a Debian 8 (Jessie) box, you should switch to kernel 4.9 from Jessie backports to avoid a bug when running Docker containers with healthchecks ! For more details read: github.com/docker/docker/issues/30402 Info openemail requires some ports to be open for incoming connections, so make sure that your firewall is not blocking these port Make sure that no other application is interfering with openemail's configuration, such as another mail service A correct DNS setup is crucial to every good mailserver setup, so please make sure you got at least the basics covered before you begin! Make sure that your system has a correct date and time setup . This is crucial for stuff like two factor TOTP authentication. Choosing a Linux Dribution for the Docker host \u00b6 During the creation of this installation guide I have used Ubuntu 18.04.2 LTS (Bionic Beaver) . Some of the examples shown in this document may largely depend on this Linux distribution. But with a minor adjustment on it you can make it prepare to get working in your Linux distribution of choice as your docker host. It may be Ubuntu, Debian, CentOS, or an another. Minimum System Resources \u00b6 Please make sure that your system has at least the following resources: Resource openemail CPU 1 GHz RAM 2 GiB + Swap (better: 4 GiB + Swap) Disk 5 GiB (without emails) System Type x86_64 ClamAV and Solr are greedy RAM munchers. You can disable them in openemail.conf by settings SKIP_CLAMD=y and SKIP_SOLR=y. Firewall & Ports \u00b6 Please check if any of openemail's standard ports are open and not in use by other applications: # netstat -tulpn | grep -E -w '25|80|110|143|443|465|587|993|995' Warning There are several problems with running openemail on a firewalld/ufw enabled system. You should disable it (if possible) and move your ruleset to the DOCKER-USER chain, which is not cleared by a Docker service restart, instead. See this blog post for information about how to use iptables-persistent with the DOCKER-USER chain. As openemail runs dockerized, INPUT rules have no effect on restricting access to openemail. Use the FORWARD chain instead. If this command returns any results please remove or stop the application running on that port. You may also adjust openemail ports via the openemail.conf` configuration file. Default Ports \u00b6 If you have a firewall in front of openemail docker host, please make sure that these ports are open for incoming connections: Service Protocol Port Container Variable Postfix SMTP TCP 25 postfix-openemail ${SMTP_PORT} Postfix SMTPS TCP 465 postfix-openemail ${SMTPS_PORT} Postfix Submission TCP 587 postfix-openemail ${SUBMISSION_PORT} Dovecot IMAP TCP 143 dovecot-openemail ${IMAP_PORT} Dovecot IMAPS TCP 993 dovecot-openemail ${IMAPS_PORT} Dovecot POP3 TCP 110 dovecot-openemail ${POP_PORT} Dovecot POP3S TCP 995 dovecot-openemail ${POPS_PORT} Dovecot ManageSieve TCP 4190 dovecot-openemail ${SIEVE_PORT} HTTP(S) TCP 80/443 nginx-openemail ${HTTP_PORT} / ${HTTPS_PORT} To bind a service to an IP address, you can prepend the IP like this: SMTP_PORT=1.2.3.4:25 Important : You cannot use IP:PORT bindings in HTTP_PORT and HTTPS_PORT. Please use HTTP_PORT=1234 and HTTP_BIND=1.2.3.4 instead. Setting Date and Time \u00b6 You need to ensure that date and time is accurate. This is required for the operation of openemail as well and accurate system logging. To check your current time run: \u00b6 $ timedatectl status You will get an output like below Local time: Tue 2019-03-05 09:17:54 UTC Universal time: Tue 2019-03-05 09:17:54 UTC RTC time: Tue 2019-03-05 09:17:55 Time zone: Etc/UTC (UTC, +0000) System clock synchronized: yes Local time: Tue 2019-03-05 09:17:54 UTC Universal time: Tue 2019-03-05 09:17:54 UTC RTC time: Tue 2019-03-05 09:17:55 Time zone: Etc/UTC (UTC, +0000) System clock synchronized: yes systemd-timesyncd.service active: no RTC in local TZ: no RTC in local TZ: no The value systemd-timesyncd.service active: no means your system hasn't been configured get it time synced using systemd-timesyncd To set your system time to sync with systemd-timesyncd run: \u00b6 $ sudo sudo timedatectl set-ntp on Now run again run timedatectl status . You will observe that systemd-timesyncd.service active: yes $ timedatectl status You will see this time systemd-timesyncd.service active: yes as in the below output ` Local time: Tue 2019-03-05 09:26:24 UTC Universal time: Tue 2019-03-05 09:26:24 UTC RTC time: Tue 2019-03-05 09:26:25 Time zone: Etc/UTC (UTC, +0000) System clock synchronized: yes systemd-timesyncd.service active: yes To check to see whether systemd-timesyncd is running: \u00b6 sudo systemctl status systemd-timesyncd If it is not running you will get an output like below. systemctl status systemd-timesyncd \u25cf systemd-timesyncd . service - Network Time Synchronization Loaded : loaded (/ lib / systemd / system / systemd-timesyncd . service ; enabled ; vendor preset : enabled ) Active : inactive ( dead ) since Wed 2019-03-06 03 : 18 : 40 UTC ; 2s ago Docs : man : systemd-timesyncd . service ( 8 ) Process : 21020 ExecStart =/ lib / systemd / systemd-timesyncd ( code = exited , status = 0 / SUCCESS ) Main PID : 21020 ( code = exited , status = 0 / SUCCESS ) Status : \"Idle.\" Mar 05 09 : 26 : 13 mail . openemail . io systemd [ 1 ] : Starting Network Time Synchronization ... Mar 05 09 : 26 : 13 mail . openemail . io systemd [ 1 ] : Started Network Time Synchronization . Mar 05 09 : 26 : 13 mail . openemail . io systemd-timesyncd [ 21020 ] : Synchronized to time server 91 . 189 . 89 . 198 : 123 ( ntp . ubuntu . com ). Mar 06 03 : 18 : 40 mail . openemail . io systemd [ 1 ] : Stopping Network Time Synchronization ... Mar 06 03 : 18 : 40 mail . openemail . io systemd [ 1 ] : Stopped Network Time Synchronization . To start systemd-timesyncd run: \u00b6 sudo systemctl start systemd-timesyncd To see the status of systemd-timesyncd run: \u00b6 sudo systemctl status systemd-timesyncd Your output should be like below \u25cf systemd-timesyncd . service - Network Time Synchronization Loaded : loaded (/ lib / systemd / system / systemd-timesyncd . service ; enabled ; vendor preset : enabled ) Active : active ( running ) since Wed 2019-03-06 03 : 30 : 08 UTC ; 8s ago Docs : man : systemd-timesyncd . service ( 8 ) Main PID : 29018 ( systemd-timesyn ) Status : \"Synchronized to time server 91.189.89.198:123 (ntp.ubuntu.com).\" Tasks : 2 ( limit : 2361 ) CGroup : / system . slice / systemd-timesyncd . service \u2514\u2500 29018 / lib / systemd / systemd-timesyncd Mar 06 03 : 30 : 08 mail . openemail . io systemd [ 1 ] : Starting Network Time Synchronization ... Mar 06 03 : 30 : 08 mail . openemail . io systemd [ 1 ] : Started Network Time Synchronization . Mar 06 03 : 30 : 08 mail . openemail . io systemd-timesyncd [ 29018 ] : Synchronized to time server 91 . 189 . 89 . 198 : 123 ( ntp . ubuntu . com ). Set up static IP for Ubuntu 18.04 \u00b6 Ubuntu 18.04 has changed its network interface configuration subsystem with new netplan configuration. The yml syntaxes are used in network configuration. To configure the network \u00b6 sudo nano /etc/netplan/50-cloud-init.yaml Below is an example configuration. Adjust settings as per your network environment. network : version : 2 ethernets : eth0 : addresses : - 178.128 . 57.210 / 20 gateway4 : 178.128 . 48.1 match : macaddress : 0 a : 17 : 6 b : 4 f : 06 : ed nameservers : addresses : - 67.207 . 67.2 - 67.207 . 67.3 search : [] set - name : eth0 To update your settings run: \u00b6 sudo netplan apply To check your network configuration run \u00b6 ip addr sh eth0 You will get an output like Below eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 0a:17:6b:4f:06:ed brd ff:ff:ff:ff:ff:ff inet 178.128.57.210/20 brd 178.128.63.255 scope global eth0 valid_lft forever preferred_lft forever inet6 fe80::817:6bff:fe4f:6ed/64 scope link valid_lft forever preferred_lft forever Setting MTU \u00b6 If you are running openemail in OpenStack environment: Check your MTU and set it accordingly in docker-compose.yml. See 4.1 in our installation docs .","title":"Prepare Your System"},{"location":"prerequisite-system/#choosing-a-linux-dribution-for-the-docker-host","text":"During the creation of this installation guide I have used Ubuntu 18.04.2 LTS (Bionic Beaver) . Some of the examples shown in this document may largely depend on this Linux distribution. But with a minor adjustment on it you can make it prepare to get working in your Linux distribution of choice as your docker host. It may be Ubuntu, Debian, CentOS, or an another.","title":"Choosing a Linux Dribution for the Docker host"},{"location":"prerequisite-system/#minimum-system-resources","text":"Please make sure that your system has at least the following resources: Resource openemail CPU 1 GHz RAM 2 GiB + Swap (better: 4 GiB + Swap) Disk 5 GiB (without emails) System Type x86_64 ClamAV and Solr are greedy RAM munchers. You can disable them in openemail.conf by settings SKIP_CLAMD=y and SKIP_SOLR=y.","title":"Minimum System Resources"},{"location":"prerequisite-system/#firewall-ports","text":"Please check if any of openemail's standard ports are open and not in use by other applications: # netstat -tulpn | grep -E -w '25|80|110|143|443|465|587|993|995' Warning There are several problems with running openemail on a firewalld/ufw enabled system. You should disable it (if possible) and move your ruleset to the DOCKER-USER chain, which is not cleared by a Docker service restart, instead. See this blog post for information about how to use iptables-persistent with the DOCKER-USER chain. As openemail runs dockerized, INPUT rules have no effect on restricting access to openemail. Use the FORWARD chain instead. If this command returns any results please remove or stop the application running on that port. You may also adjust openemail ports via the openemail.conf` configuration file.","title":"Firewall &amp; Ports"},{"location":"prerequisite-system/#default-ports","text":"If you have a firewall in front of openemail docker host, please make sure that these ports are open for incoming connections: Service Protocol Port Container Variable Postfix SMTP TCP 25 postfix-openemail ${SMTP_PORT} Postfix SMTPS TCP 465 postfix-openemail ${SMTPS_PORT} Postfix Submission TCP 587 postfix-openemail ${SUBMISSION_PORT} Dovecot IMAP TCP 143 dovecot-openemail ${IMAP_PORT} Dovecot IMAPS TCP 993 dovecot-openemail ${IMAPS_PORT} Dovecot POP3 TCP 110 dovecot-openemail ${POP_PORT} Dovecot POP3S TCP 995 dovecot-openemail ${POPS_PORT} Dovecot ManageSieve TCP 4190 dovecot-openemail ${SIEVE_PORT} HTTP(S) TCP 80/443 nginx-openemail ${HTTP_PORT} / ${HTTPS_PORT} To bind a service to an IP address, you can prepend the IP like this: SMTP_PORT=1.2.3.4:25 Important : You cannot use IP:PORT bindings in HTTP_PORT and HTTPS_PORT. Please use HTTP_PORT=1234 and HTTP_BIND=1.2.3.4 instead.","title":"Default Ports"},{"location":"prerequisite-system/#setting-date-and-time","text":"You need to ensure that date and time is accurate. This is required for the operation of openemail as well and accurate system logging.","title":"Setting Date and Time"},{"location":"prerequisite-system/#to-check-your-current-time-run","text":"$ timedatectl status You will get an output like below Local time: Tue 2019-03-05 09:17:54 UTC Universal time: Tue 2019-03-05 09:17:54 UTC RTC time: Tue 2019-03-05 09:17:55 Time zone: Etc/UTC (UTC, +0000) System clock synchronized: yes Local time: Tue 2019-03-05 09:17:54 UTC Universal time: Tue 2019-03-05 09:17:54 UTC RTC time: Tue 2019-03-05 09:17:55 Time zone: Etc/UTC (UTC, +0000) System clock synchronized: yes systemd-timesyncd.service active: no RTC in local TZ: no RTC in local TZ: no The value systemd-timesyncd.service active: no means your system hasn't been configured get it time synced using systemd-timesyncd","title":"To check your current time run:"},{"location":"prerequisite-system/#to-set-your-system-time-to-sync-with-systemd-timesyncd-run","text":"$ sudo sudo timedatectl set-ntp on Now run again run timedatectl status . You will observe that systemd-timesyncd.service active: yes $ timedatectl status You will see this time systemd-timesyncd.service active: yes as in the below output ` Local time: Tue 2019-03-05 09:26:24 UTC Universal time: Tue 2019-03-05 09:26:24 UTC RTC time: Tue 2019-03-05 09:26:25 Time zone: Etc/UTC (UTC, +0000) System clock synchronized: yes systemd-timesyncd.service active: yes","title":"To set your system time to sync with systemd-timesyncd run:"},{"location":"prerequisite-system/#to-check-to-see-whether-systemd-timesyncd-is-running","text":"sudo systemctl status systemd-timesyncd If it is not running you will get an output like below. systemctl status systemd-timesyncd \u25cf systemd-timesyncd . service - Network Time Synchronization Loaded : loaded (/ lib / systemd / system / systemd-timesyncd . service ; enabled ; vendor preset : enabled ) Active : inactive ( dead ) since Wed 2019-03-06 03 : 18 : 40 UTC ; 2s ago Docs : man : systemd-timesyncd . service ( 8 ) Process : 21020 ExecStart =/ lib / systemd / systemd-timesyncd ( code = exited , status = 0 / SUCCESS ) Main PID : 21020 ( code = exited , status = 0 / SUCCESS ) Status : \"Idle.\" Mar 05 09 : 26 : 13 mail . openemail . io systemd [ 1 ] : Starting Network Time Synchronization ... Mar 05 09 : 26 : 13 mail . openemail . io systemd [ 1 ] : Started Network Time Synchronization . Mar 05 09 : 26 : 13 mail . openemail . io systemd-timesyncd [ 21020 ] : Synchronized to time server 91 . 189 . 89 . 198 : 123 ( ntp . ubuntu . com ). Mar 06 03 : 18 : 40 mail . openemail . io systemd [ 1 ] : Stopping Network Time Synchronization ... Mar 06 03 : 18 : 40 mail . openemail . io systemd [ 1 ] : Stopped Network Time Synchronization .","title":"To check to see whether systemd-timesyncd is running:"},{"location":"prerequisite-system/#to-start-systemd-timesyncd-run","text":"sudo systemctl start systemd-timesyncd","title":"To start systemd-timesyncd run:"},{"location":"prerequisite-system/#to-see-the-status-of-systemd-timesyncd-run","text":"sudo systemctl status systemd-timesyncd Your output should be like below \u25cf systemd-timesyncd . service - Network Time Synchronization Loaded : loaded (/ lib / systemd / system / systemd-timesyncd . service ; enabled ; vendor preset : enabled ) Active : active ( running ) since Wed 2019-03-06 03 : 30 : 08 UTC ; 8s ago Docs : man : systemd-timesyncd . service ( 8 ) Main PID : 29018 ( systemd-timesyn ) Status : \"Synchronized to time server 91.189.89.198:123 (ntp.ubuntu.com).\" Tasks : 2 ( limit : 2361 ) CGroup : / system . slice / systemd-timesyncd . service \u2514\u2500 29018 / lib / systemd / systemd-timesyncd Mar 06 03 : 30 : 08 mail . openemail . io systemd [ 1 ] : Starting Network Time Synchronization ... Mar 06 03 : 30 : 08 mail . openemail . io systemd [ 1 ] : Started Network Time Synchronization . Mar 06 03 : 30 : 08 mail . openemail . io systemd-timesyncd [ 29018 ] : Synchronized to time server 91 . 189 . 89 . 198 : 123 ( ntp . ubuntu . com ).","title":"To see the status of systemd-timesyncd run:"},{"location":"prerequisite-system/#set-up-static-ip-for-ubuntu-1804","text":"Ubuntu 18.04 has changed its network interface configuration subsystem with new netplan configuration. The yml syntaxes are used in network configuration.","title":"Set up static IP for Ubuntu 18.04"},{"location":"prerequisite-system/#to-configure-the-network","text":"sudo nano /etc/netplan/50-cloud-init.yaml Below is an example configuration. Adjust settings as per your network environment. network : version : 2 ethernets : eth0 : addresses : - 178.128 . 57.210 / 20 gateway4 : 178.128 . 48.1 match : macaddress : 0 a : 17 : 6 b : 4 f : 06 : ed nameservers : addresses : - 67.207 . 67.2 - 67.207 . 67.3 search : [] set - name : eth0","title":"To configure the network"},{"location":"prerequisite-system/#to-update-your-settings-run","text":"sudo netplan apply","title":"To update your settings run:"},{"location":"prerequisite-system/#to-check-your-network-configuration-run","text":"ip addr sh eth0 You will get an output like Below eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 0a:17:6b:4f:06:ed brd ff:ff:ff:ff:ff:ff inet 178.128.57.210/20 brd 178.128.63.255 scope global eth0 valid_lft forever preferred_lft forever inet6 fe80::817:6bff:fe4f:6ed/64 scope link valid_lft forever preferred_lft forever","title":"To check your network configuration run"},{"location":"prerequisite-system/#setting-mtu","text":"If you are running openemail in OpenStack environment: Check your MTU and set it accordingly in docker-compose.yml. See 4.1 in our installation docs .","title":"Setting MTU"},{"location":"third_party-gitea/","text":"With Gitea' ability to authenticate over SMTP it is trivial to integrate it with mailcow. Few changes are needed: 1. Open docker-compose.override.yml and add gitea: version : '2.1' services : gitea - mailcow : image : gitea / gitea : 1 volumes : - . / data / gitea : / data networks : mailcow - network : aliases : - gitea ports : - \"${GITEA_SSH_PORT:-127.0.0.1:4000}:22\" 2. Create data/conf/nginx/site.gitea.custom , add: location / gitea / { proxy_pass http : // gitea : 3000 / ; } 3. Open mailcow.conf and define the binding you want gitea to use for SSH. Example: GITEA_SSH_PORT=127.0.0.1:4000 5. Run docker-compose up -d to bring up the gitea container and run docker-compose restart nginx-mailcow afterwards. 6. Open http://${MAILCOW_HOSTNAME}/gitea/ , for example http://mx.example.org/gitea/ . For database details set mysql as database host. Use the value of DBNAME found in mailcow.conf as database name, DBUSER as database user and DBPASS as database password. 7. Once the installation is complete, login as admin and set \"settings\" -> \"authorization\" -> \"enable SMTP\". SMTP Host should be postfix with port 587 , set Skip TLS Verify as we are using an unlisted SAN (\"postfix\" is most likely not part of your certificate). 8. Create data/gitea/gitea/conf/app.ini and set following values. You can consult gitea cheat sheet for their meaning and other possible values. [server] SSH_LISTEN_PORT = 22 # For GITEA_SSH_PORT=127.0.0.1:4000 in mailcow.conf, set: SSH_DOMAIN = 127.0.0.1 SSH_PORT = 4000 # For MAILCOW_HOSTNAME=mx.example.org in mailcow.conf (and default ports for HTTPS), set: ROOT_URL = https://mx.example.org/gitea/ 9. Restart gitea with docker-compose restart gitea-mailcow . Your users should be able to login with mailcow managed accounts.","title":"Gitea"},{"location":"third_party-gogs/","text":"With Gogs' ability to authenticate over SMTP it is trivial to integrate it with mailcow. Few changes are needed: 1. Open docker-compose.override.yml and add Gogs: version : '2.1' services : gogs - mailcow : image : gogs / gogs volumes : - . / data / gogs : / data networks : mailcow - network : aliases : - gogs ports : - \"${GOGS_SSH_PORT:-127.0.0.1:4000}:22\" 2. Create data/conf/nginx/site.gogs.custom , add: location / gogs / { proxy_pass http : // gogs : 3000 / ; } 3. Open mailcow.conf and define the binding you want Gogs to use for SSH. Example: GOGS_SSH_PORT=127.0.0.1:4000 5. Run docker-compose up -d to bring up the Gogs container and run docker-compose restart nginx-mailcow afterwards. 6. Open http://${MAILCOW_HOSTNAME}/gogs/ , for example http://mx.example.org/gogs/ . For database details set mysql as database host. Use the value of DBNAME found in mailcow.conf as database name, DBUSER as database user and DBPASS as database password. 7. Once the installation is complete, login as admin and set \"settings\" -> \"authorization\" -> \"enable SMTP\". SMTP Host should be postfix with port 587 , set Skip TLS Verify as we are using an unlisted SAN (\"postfix\" is most likely not part of your certificate). 8. Create data/gogs/gogs/conf/app.ini and set following values. You can consult Gogs cheat sheet for their meaning and other possible values. [server] SSH_LISTEN_PORT = 22 # For GOGS_SSH_PORT=127.0.0.1:4000 in mailcow.conf, set: SSH_DOMAIN = 127.0.0.1 SSH_PORT = 4000 # For MAILCOW_HOSTNAME=mx.example.org in mailcow.conf (and default ports for HTTPS), set: ROOT_URL = https://mx.example.org/gogs/ 9. Restart Gogs with docker-compose restart gogs-mailcow . Your users should be able to login with mailcow managed accounts.","title":"Gogs"},{"location":"third_party-portainer/","text":"In order to enable Portainer, the docker-compose.yml and site.conf for Nginx must be modified. 1. Create a new file docker-compose.override.yml in the mailcow-dockerized root folder and insert the following configuration version: '2.1' services: portainer-mailcow: image: portainer/portainer volumes: - /var/run/docker.sock:/var/run/docker.sock - ./data/conf/portainer:/data restart: always dns: - 172.22.1.254 dns_search: mailcow-network networks: mailcow-network: aliases: - portainer 2a. Create data/conf/nginx/portainer.conf : upstream portainer { server portainer-mailcow : 9000 ; } map $ http_upgrade $ connection_upgrade { default upgrade ; '' close ; } 2b. Insert a new location to the default mailcow site by creating the file data/conf/nginx/site.portainer.custom : location / portainer / { proxy_http_version 1.1 ; proxy_set_header Host $http_host ; # required for docker client's sake proxy_set_header X-Real-IP $remote_addr ; # pass on real client's IP proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_set_header X-Forwarded-Proto $scheme ; proxy_read_timeout 900 ; proxy_set_header Connection \"\" ; proxy_buffers 32 4k ; proxy_pass http : // portainer / ; } location / portainer / api / websocket / { proxy_http_version 1.1 ; proxy_set_header Upgrade $http_upgrade ; proxy_set_header Connection $connection_upgrade ; proxy_pass http : // portainer / api / websocket / ; } 3. Apply your changes: docker-compose up -d && docker-compose restart nginx-mailcow Now you can simply navigate to https://${MAILCOW_HOSTNAME}/portainer/ to view your Portainer container monitoring page. You\u2019ll then be prompted to specify a new password for the admin account. After specifying your password, you\u2019ll then be able to connect to the Portainer UI.","title":"Portainer"},{"location":"third_party-roundcube/","text":"Download Roundcube 1.3.x to the web htdocs directory and extract it (here rc/ ): cd data/web wget -O - https://github.com/roundcube/roundcubemail/releases/download/1.3.x/roundcubemail-1.3.x-complete.tar.gz | tar xfvz - # Change folder name mv roundcubemail-1.3.x rc # Change permissions chown -R root: rc/ Create a file data/web/rc/config/config.inc.php with the following content. Change the des_key parameter to a random value. It is used to temporarily store your IMAP password. <?php error_reporting ( 0 ); if ( ! file_exists ( '/tmp/mime.types' )) { file_put_contents ( \"/tmp/mime.types\" , fopen ( \"http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types\" , 'r' )); } $config = array (); $config [ 'db_dsnw' ] = 'mysql://' . getenv ( 'DBUSER' ) . ':' . getenv ( 'DBPASS' ) . '@mysql/' . getenv ( 'DBNAME' ); $config [ 'default_host' ] = 'tls://dovecot' ; $config [ 'default_port' ] = '143' ; $config [ 'smtp_server' ] = 'tls://postfix' ; $config [ 'smtp_port' ] = 587 ; $config [ 'smtp_user' ] = '%u' ; $config [ 'smtp_pass' ] = '%p' ; $config [ 'support_url' ] = '' ; $config [ 'product_name' ] = 'Roundcube Webmail' ; $config [ 'des_key' ] = 'yourrandomstring_changeme' ; $config [ 'log_dir' ] = '/dev/null' ; $config [ 'temp_dir' ] = '/tmp' ; $config [ 'plugins' ] = array ( 'archive' , 'managesieve' ); $config [ 'skin' ] = 'larry' ; $config [ 'mime_types' ] = '/tmp/mime.types' ; $config [ 'imap_conn_options' ] = array ( 'ssl' => array ( 'verify_peer' => false , 'verify_peer_name' => false , 'allow_self_signed' => true ) ); $config [ 'enable_installer' ] = true ; $config [ 'smtp_conn_options' ] = array ( 'ssl' => array ( 'verify_peer' => false , 'verify_peer_name' => false , 'allow_self_signed' => true ) ); $config [ 'managesieve_port' ] = 4190 ; $config [ 'managesieve_host' ] = 'tls://dovecot' ; $config [ 'managesieve_conn_options' ] = array ( 'ssl' => array ( 'verify_peer' => false , 'verify_peer_name' => false , 'allow_self_signed' => true ) ); // Enables separate management interface for vacation responses (out-of-office) // 0 - no separate section (default), // 1 - add Vacation section, // 2 - add Vacation section, but hide Filters section $config [ 'managesieve_vacation' ] = 1 ; Point your browser to https://myserver/rc/installer and follow the instructions. Initialize the database and leave the installer. Delete the directory data/web/rc/installer after a successful installation! Enable change password function in Roundcube \u00b6 Open data/web/rc/config/config.inc.php and enable the password plugin: ... $config['plugins'] = array( 'archive', 'password', ); ... Open data/web/rc/plugins/password/password.php , search for case 'ssha': and add above: case 'ssha256' : $ salt = rcube_utils :: random_bytes ( 8 ); $ crypted = base64_encode ( hash ( 'sha256' , $ password . $ salt , TRUE ) . $ salt ); $ prefix = '{SSHA256}' ; break ; Open data/web/rc/plugins/password/config.inc.php and change the following parameters (or add them at the bottom of that file): $config['password_driver'] = 'sql'; $config['password_algorithm'] = 'ssha256'; $config['password_algorithm_prefix'] = '{SSHA256}'; $config['password_query'] = \"UPDATE mailbox SET password = %P WHERE username = %u\"; Optionally, you can add Roundcube's link to the mailcow Apps list. To do this, open or create data/web/inc/vars.local.inc.php and add the following code-block: NOTE: Don't forget to add the <?php delimiter on the first line ... $MAILCOW_APPS = array( array( 'name' => 'SOGo', 'link' => '/SOGo/' ), array( 'name' => 'Roundcube', 'link' => '/rc/' ) ); ...","title":"Roundcube"},{"location":"third_party-roundcube/#enable-change-password-function-in-roundcube","text":"Open data/web/rc/config/config.inc.php and enable the password plugin: ... $config['plugins'] = array( 'archive', 'password', ); ... Open data/web/rc/plugins/password/password.php , search for case 'ssha': and add above: case 'ssha256' : $ salt = rcube_utils :: random_bytes ( 8 ); $ crypted = base64_encode ( hash ( 'sha256' , $ password . $ salt , TRUE ) . $ salt ); $ prefix = '{SSHA256}' ; break ; Open data/web/rc/plugins/password/config.inc.php and change the following parameters (or add them at the bottom of that file): $config['password_driver'] = 'sql'; $config['password_algorithm'] = 'ssha256'; $config['password_algorithm_prefix'] = '{SSHA256}'; $config['password_query'] = \"UPDATE mailbox SET password = %P WHERE username = %u\"; Optionally, you can add Roundcube's link to the mailcow Apps list. To do this, open or create data/web/inc/vars.local.inc.php and add the following code-block: NOTE: Don't forget to add the <?php delimiter on the first line ... $MAILCOW_APPS = array( array( 'name' => 'SOGo', 'link' => '/SOGo/' ), array( 'name' => 'Roundcube', 'link' => '/rc/' ) ); ...","title":"Enable change password function in Roundcube"},{"location":"third_party-thunderbird/","text":"Build the SOGo Integrator plugin \u00b6 Install GNU Make, tar, and ZIP if you don't already have them installed. On Debian/Ubuntu, this can be done using apt-get install make tar zip Next, go to data/web inside mailcow-dockerized. Place the file thunderbird-plugins.php into that directory. Create a new directory thunderbird-plugins and place the script build-plugins.sh into it. Finally, execute the script with your hostname as an argument and piping it the names of all domains that mailcow handles. All of this can be done using the following commands: cd data/web curl -LO https://github.com/mailcow/mailcow-dockerized-docs/raw/master/docs/download/thunderbird-plugins.php mkdir thunderbird-plugins cd thunderbird-plugins curl -Lo build-plugins.sh https://github.com/mailcow/mailcow-dockerized-docs/raw/master/docs/download/build-thunderbird-plugins.sh chmod +x build-plugins.sh echo example.com example.org | ./build-plugins.sh mailcow.example.com Install it in Thunderbird \u00b6 After you have set up your mailcow IMAP account in Thunderbird, download the SOGo integrator plugin for your domain, e.g. https://mailcow.example.com/thunderbird-plugins/sogo-integrator-31.0.6-example.com.xpi , and install it into Thunderbird. All your address books and calendars will be configured automatically.","title":"SOGo Integrator for Thunderbird"},{"location":"third_party-thunderbird/#build-the-sogo-integrator-plugin","text":"Install GNU Make, tar, and ZIP if you don't already have them installed. On Debian/Ubuntu, this can be done using apt-get install make tar zip Next, go to data/web inside mailcow-dockerized. Place the file thunderbird-plugins.php into that directory. Create a new directory thunderbird-plugins and place the script build-plugins.sh into it. Finally, execute the script with your hostname as an argument and piping it the names of all domains that mailcow handles. All of this can be done using the following commands: cd data/web curl -LO https://github.com/mailcow/mailcow-dockerized-docs/raw/master/docs/download/thunderbird-plugins.php mkdir thunderbird-plugins cd thunderbird-plugins curl -Lo build-plugins.sh https://github.com/mailcow/mailcow-dockerized-docs/raw/master/docs/download/build-thunderbird-plugins.sh chmod +x build-plugins.sh echo example.com example.org | ./build-plugins.sh mailcow.example.com","title":"Build the SOGo Integrator plugin"},{"location":"third_party-thunderbird/#install-it-in-thunderbird","text":"After you have set up your mailcow IMAP account in Thunderbird, download the SOGo integrator plugin for your domain, e.g. https://mailcow.example.com/thunderbird-plugins/sogo-integrator-31.0.6-example.com.xpi , and install it into Thunderbird. All your address books and calendars will be configured automatically.","title":"Install it in Thunderbird"},{"location":"u_e-80_to_443/","text":"Since February the 28th 2017 mailcow does come with port 80 and 443 enabled. Do not use the config below for reverse proxy setups , please see our reverse proxy guide for this, which includes a redirect from HTTP to HTTPS. Open mailcow.conf and set HTTP_BIND=0.0.0.0 - if not already set. Now we need to redirect all requests other than autoconfig.* to HTTPS. You do not need to change anything in the template below. Open data/conf/nginx/site.conf and add two new server configs at the top of that file: server { listen 80 ; listen [ :: ] : 80 ; server_name autoconfig.* ; root /web ; location / { fastcgi_split_path_info ^(.+\\.php)(/.+)$ ; fastcgi_pass phpfpm : 9002 ; include /etc/nginx/fastcgi_params ; fastcgi_param SCRIPT_FILENAME $document_root/autoconfig.php ; try_files /autoconfig.php =404 ; } } server { listen 80 default_server ; listen [ :: ] : 80 default_server ; include /etc/nginx/conf.d/server_name.active ; if ( $request_uri ~* \"%0A|%0D\" ) { return 403 ; } return 301 https ://$ host $ uri $ is_args $ args ; } In case you changed the HTTP_BIND parameter, recreate the container: docker-compose up -d Otherwise restart Nginx: docker-compose restart nginx-mailcow","title":"Redirect HTTP to HTTPS"},{"location":"u_e-autodiscover_config/","text":"Open/create data/web/inc/vars.local.inc.php and add your changes to the configuration array. Changes will be merged with \"$autodiscover_config\" in data/web/inc/vars.inc.php ): <?php $autodiscover_config = array ( // General autodiscover service type: \"activesync\" or \"imap\" // emClient uses autodiscover, but does not support ActiveSync. mailcow excludes emClient from ActiveSync. 'autodiscoverType' => 'activesync' , // If autodiscoverType => activesync, also use ActiveSync (EAS) for Outlook desktop clients (>= Outlook 2013 on Windows) // Outlook for Mac does not support ActiveSync 'useEASforOutlook' => 'yes' , // Please don't use STARTTLS-enabled service ports in the \"port\" variable. // The autodiscover service will always point to SMTPS and IMAPS (TLS-wrapped services). // The autoconfig service will additionally announce the STARTTLS-enabled ports, specified in the \"tlsport\" variable. 'imap' => array ( 'server' => $mailcow_hostname , 'port' => array_pop ( explode ( ':' , getenv ( 'IMAPS_PORT' ))), 'tlsport' => array_pop ( explode ( ':' , getenv ( 'IMAP_PORT' ))), ), 'pop3' => array ( 'server' => $mailcow_hostname , 'port' => array_pop ( explode ( ':' , getenv ( 'POPS_PORT' ))), 'tlsport' => array_pop ( explode ( ':' , getenv ( 'POP_PORT' ))), ), 'smtp' => array ( 'server' => $mailcow_hostname , 'port' => array_pop ( explode ( ':' , getenv ( 'SMTPS_PORT' ))), 'tlsport' => array_pop ( explode ( ':' , getenv ( 'SUBMISSION_PORT' ))), ), 'activesync' => array ( 'url' => 'https://' . $mailcow_hostname . ( $https_port == 443 ? '' : ':' . $https_port ) . '/Microsoft-Server-ActiveSync' , ), 'caldav' => array ( 'server' => $mailcow_hostname , 'port' => $https_port , ), 'carddav' => array ( 'server' => $mailcow_hostname , 'port' => $https_port , ), ); To always use IMAP and SMTP instead of EAS, set 'autodiscoverType' => 'imap' . Disable ActiveSync for Outlook desktop clients by setting \"useEASforOutlook\" to \"no\".","title":"Autodiscover / Autoconfig"},{"location":"u_e-backup_restore-maildir/","text":"Backup \u00b6 This line backups the vmail directory to a file backup_vmail.tar.gz in the mailcow root directory: cd /path/to/mailcow-dockerized docker run --rm -i -v $(docker inspect --format '{{ range .Mounts }}{{ if eq .Destination \"/var/vmail\" }}{{ .Name }}{{ end }}{{ end }}' $(docker-compose ps -q dovecot-mailcow)):/vmail -v ${ PWD } :/backup debian:stretch-slim tar cvfz /backup/backup_vmail.tar.gz /vmail You can change the path by adjusting ${PWD} (which equals to the current directory) to any path you have write-access to. Set the filename backup_vmail.tar.gz to any custom name, but leave the path as it is. Example: [...] tar cvfz /backup/my_own_filename_.tar.gz Restore \u00b6 cd /path/to/mailcow-dockerized docker run --rm -it -v $(docker inspect --format '{{ range .Mounts }}{{ if eq .Destination \"/var/vmail\" }}{{ .Name }}{{ end }}{{ end }}' $(docker-compose ps -q dovecot-mailcow)):/vmail -v ${ PWD } :/backup debian:stretch-slim tar xvfz /backup/backup_vmail.tar.gz","title":"Maildir"},{"location":"u_e-backup_restore-maildir/#backup","text":"This line backups the vmail directory to a file backup_vmail.tar.gz in the mailcow root directory: cd /path/to/mailcow-dockerized docker run --rm -i -v $(docker inspect --format '{{ range .Mounts }}{{ if eq .Destination \"/var/vmail\" }}{{ .Name }}{{ end }}{{ end }}' $(docker-compose ps -q dovecot-mailcow)):/vmail -v ${ PWD } :/backup debian:stretch-slim tar cvfz /backup/backup_vmail.tar.gz /vmail You can change the path by adjusting ${PWD} (which equals to the current directory) to any path you have write-access to. Set the filename backup_vmail.tar.gz to any custom name, but leave the path as it is. Example: [...] tar cvfz /backup/my_own_filename_.tar.gz","title":"Backup"},{"location":"u_e-backup_restore-maildir/#restore","text":"cd /path/to/mailcow-dockerized docker run --rm -it -v $(docker inspect --format '{{ range .Mounts }}{{ if eq .Destination \"/var/vmail\" }}{{ .Name }}{{ end }}{{ end }}' $(docker-compose ps -q dovecot-mailcow)):/vmail -v ${ PWD } :/backup debian:stretch-slim tar xvfz /backup/backup_vmail.tar.gz","title":"Restore"},{"location":"u_e-backup_restore-mysql/","text":"Backup \u00b6 cd /path/to/mailcow-dockerized source mailcow.conf DATE=$(date +\"%Y%m%d_%H%M%S\") docker-compose exec -T mysql-mailcow mysqldump --default-character-set=utf8mb4 -u ${ DBUSER } -p ${ DBPASS } ${ DBNAME } > backup_ ${ DBNAME } _ ${ DATE } .sql Restore \u00b6 Warning You should redirect the SQL dump without docker-compose to prevent parsing errors. cd /path/to/mailcow-dockerized source mailcow.conf docker exec -i $(docker-compose ps -q mysql-mailcow) mysql -u ${ DBUSER } -p ${ DBPASS } ${ DBNAME } < backup _file.sql","title":"MySQL"},{"location":"u_e-backup_restore-mysql/#backup","text":"cd /path/to/mailcow-dockerized source mailcow.conf DATE=$(date +\"%Y%m%d_%H%M%S\") docker-compose exec -T mysql-mailcow mysqldump --default-character-set=utf8mb4 -u ${ DBUSER } -p ${ DBPASS } ${ DBNAME } > backup_ ${ DBNAME } _ ${ DATE } .sql","title":"Backup"},{"location":"u_e-backup_restore-mysql/#restore","text":"Warning You should redirect the SQL dump without docker-compose to prevent parsing errors. cd /path/to/mailcow-dockerized source mailcow.conf docker exec -i $(docker-compose ps -q mysql-mailcow) mysql -u ${ DBUSER } -p ${ DBPASS } ${ DBNAME } < backup _file.sql","title":"Restore"},{"location":"u_e-change_config/","text":"The most important configuration files are mounted from the host into the related containers: data/conf \u251c\u2500\u2500 unbound \u2502 \u2514\u2500\u2500 unbound.conf \u251c\u2500\u2500 dovecot \u2502 \u251c\u2500\u2500 dovecot.conf \u2502 \u251c\u2500\u2500 dovecot-master.passwd \u2502 \u251c\u2500\u2500 sieve_after \u2502 \u2514\u2500\u2500 sql \u2502 \u251c\u2500\u2500 dovecot-dict-sql.conf \u2502 \u2514\u2500\u2500 dovecot-mysql.conf \u251c\u2500\u2500 mysql \u2502 \u2514\u2500\u2500 my.cnf \u251c\u2500\u2500 nginx \u2502 \u251c\u2500\u2500 dynmaps.conf \u2502 \u251c\u2500\u2500 site.conf \u2502 \u2514\u2500\u2500 templates \u2502 \u251c\u2500\u2500 listen_plain.template \u2502 \u251c\u2500\u2500 listen_ssl.template \u2502 \u2514\u2500\u2500 server_name.template \u251c\u2500\u2500 postfix \u2502 \u251c\u2500\u2500 main.cf \u2502 \u251c\u2500\u2500 master.cf \u2502 \u251c\u2500\u2500 postscreen_access.cidr \u2502 \u251c\u2500\u2500 smtp_dsn_filter \u2502 \u2514\u2500\u2500 sql \u2502 \u251c\u2500\u2500 mysql_relay_recipient_maps.cf \u2502 \u251c\u2500\u2500 mysql_tls_enforce_in_policy.cf \u2502 \u251c\u2500\u2500 mysql_tls_enforce_out_policy.cf \u2502 \u251c\u2500\u2500 mysql_virtual_alias_domain_catchall_maps.cf \u2502 \u251c\u2500\u2500 mysql_virtual_alias_domain_maps.cf \u2502 \u251c\u2500\u2500 mysql_virtual_alias_maps.cf \u2502 \u251c\u2500\u2500 mysql_virtual_domains_maps.cf \u2502 \u251c\u2500\u2500 mysql_virtual_mailbox_maps.cf \u2502 \u251c\u2500\u2500 mysql_virtual_relay_domain_maps.cf \u2502 \u251c\u2500\u2500 mysql_virtual_sender_acl.cf \u2502 \u2514\u2500\u2500 mysql_virtual_spamalias_maps.cf \u251c\u2500\u2500 rspamd \u2502 \u251c\u2500\u2500 dynmaps \u2502 \u2502 \u251c\u2500\u2500 authoritative.php \u2502 \u2502 \u251c\u2500\u2500 settings.php \u2502 \u2502 \u251c\u2500\u2500 tags.php \u2502 \u2502 \u2514\u2500\u2500 vars.inc.php -> ../../../web/inc/vars.inc.php \u2502 \u251c\u2500\u2500 local.d \u2502 \u2502 \u251c\u2500\u2500 dkim.conf \u2502 \u2502 \u251c\u2500\u2500 metrics.conf \u2502 \u2502 \u251c\u2500\u2500 options.inc \u2502 \u2502 \u251c\u2500\u2500 redis.conf \u2502 \u2502 \u251c\u2500\u2500 rspamd.conf.local \u2502 \u2502 \u2514\u2500\u2500 statistic.conf \u2502 \u251c\u2500\u2500 lua \u2502 \u2502 \u2514\u2500\u2500 rspamd.local.lua \u2502 \u2514\u2500\u2500 override.d \u2502 \u251c\u2500\u2500 logging.inc \u2502 \u251c\u2500\u2500 worker-controller.inc \u2502 \u2514\u2500\u2500 worker-normal.inc \u2514\u2500\u2500 sogo \u251c\u2500\u2500 sieve.creds \u2514\u2500\u2500 sogo.conf Just change the according configuration file on the host and restart the related service: docker-compose restart service-mailcow","title":"Adjust Service Configurations"},{"location":"u_e-deinstall/","text":"To remove mailcow: dockerized with all it's volumes, images and containers do: docker-compose down -v --rmi all --remove-orphans Info -v Remove named volumes declared in the volumes section of the Compose file and anonymous volumes attached to containers. --rmi Remove images. Type must be one of: all : Remove all images used by any service. local : Remove only images that don't have a custom tag set by the image field. --remove-orphans Remove containers for services not defined in the compose file. By default docker-compose down only removes currently active containers and networks defined in the docker-compose.yml .","title":"Deinstall"},{"location":"u_e-docker-cust_dockerfiles/","text":"Make your changes in data/Dockerfiles/$service and build the image locally: docker build data/Dockerfiles/service -t mailcow/$service Now auto-recreate modified containers: docker-compose up -d","title":"Customize Dockerfiles"},{"location":"u_e-docker-dc_bash_compl/","text":"To get some sexy bash completion inside your containers simply execute the following: curl -L https://raw.githubusercontent.com/docker/compose/$(docker-compose version --short)/contrib/completion/bash/docker-compose -o /etc/bash_completion.d/docker-compose","title":"Docker Compose Bash Completion"},{"location":"u_e-dovecot-any_acl/","text":"On August the 17th, we disabled the possibility to share with \"any\" or \"all authenticated users\" by default. This function can be re-enabled by setting ACL_ANYONE to allow in mailcow.conf: ACL_ANYONE=allow Apply the changes by running docker-compose up -d .","title":"(Re-)Enable any and all authenticated ACL settings"},{"location":"u_e-dovecot-expunge/","text":"If you want to delete old mails out of the .Junk or .Trash folders or maybe delete all read mails that are older than a certain amount of time you may use dovecot's tool doveadm man doveadm-expunge . The manual way \u00b6 That said, let's dive in: Delete a user's mails inside the junk folder that are read and older than 4 hours docker-compose exec dovecot-mailcow doveadm expunge -u 'mailbox@example.com' mailbox 'Junk' SEEN not SINCE 4h Delete all user's mails in the junk folder that are older than 7 days docker-compose exec dovecot-mailcow doveadm expunge -A mailbox 'Junk' savedbefore 7d Delete mails inside a custom folder inside a user's inbox that are not flagged and older than 2 weeks docker-compose exec dovecot-mailcow doveadm expunge -u 'mailbox@example.com' mailbox 'INBOX/custom-folder' not FLAGGED not SINCE 2w Info For possible time spans or search keys have a look at man doveadm-search-query Make it automatic \u00b6 If you want to automate such a task you can create a cron job on your host that calls a script like the one below: #!/bin/bash # Path to mailcow-dockerized, e.g. /opt/mailcow-dockerized cd /path/to/your/mailcow-dockerized /usr/local/bin/docker-compose exec -T dovecot-mailcow doveadm expunge -A mailbox 'Junk' savedbefore 2w /usr/local/bin/docker-compose exec -T dovecot-mailcow doveadm expunge -A mailbox 'Junk' SEEN not SINCE 12h [ ... ] To create a cron job you may execute crontab -e and insert something like the following to execute a script: # Execute everyday at 04:00 A.M. 0 4 * * * /path/to/your/expunge_mailboxes.sh","title":"Expunge a User's Mails"},{"location":"u_e-dovecot-expunge/#the-manual-way","text":"That said, let's dive in: Delete a user's mails inside the junk folder that are read and older than 4 hours docker-compose exec dovecot-mailcow doveadm expunge -u 'mailbox@example.com' mailbox 'Junk' SEEN not SINCE 4h Delete all user's mails in the junk folder that are older than 7 days docker-compose exec dovecot-mailcow doveadm expunge -A mailbox 'Junk' savedbefore 7d Delete mails inside a custom folder inside a user's inbox that are not flagged and older than 2 weeks docker-compose exec dovecot-mailcow doveadm expunge -u 'mailbox@example.com' mailbox 'INBOX/custom-folder' not FLAGGED not SINCE 2w Info For possible time spans or search keys have a look at man doveadm-search-query","title":"The manual way"},{"location":"u_e-dovecot-expunge/#make-it-automatic","text":"If you want to automate such a task you can create a cron job on your host that calls a script like the one below: #!/bin/bash # Path to mailcow-dockerized, e.g. /opt/mailcow-dockerized cd /path/to/your/mailcow-dockerized /usr/local/bin/docker-compose exec -T dovecot-mailcow doveadm expunge -A mailbox 'Junk' savedbefore 2w /usr/local/bin/docker-compose exec -T dovecot-mailcow doveadm expunge -A mailbox 'Junk' SEEN not SINCE 12h [ ... ] To create a cron job you may execute crontab -e and insert something like the following to execute a script: # Execute everyday at 04:00 A.M. 0 4 * * * /path/to/your/expunge_mailboxes.sh","title":"Make it automatic"},{"location":"u_e-dovecot-fts/","text":"Solr is used for setups with memory >= 3.5 GiB to provide full-text search in Dovecot. Please be aware that applications like Solr may need maintenance from time to time. Besides that, Solr will eat a lot of RAM, depending on the usage of your server. Please avoid it on machines with less than 3 GB RAM. The default heap size (1024 M) is defined in mailcow.conf. Since we run in Docker and create our containers with the \"restart: always\" flag, a oom situation will at least only trigger a restart of the container. FTS related Dovecot commands \u00b6 docker-compose exec dovecot-mailcow doveadm fts rescan -u user@domain `# All: docker-compose exec dovecot-mailcow doveadm fts rescan -A Dovecot Wiki: \"Scan what mails exist in the full text search index and compare those to what actually exist in mailboxes. This removes mails from the index that have already been expunged and makes sure that the next doveadm index will index all the missing mails (if any).\" This does not re-index a mailbox. It basically repairs a given index. If you want to re-index a users data, you can run the followig command, where '*' can also be a mailbox mask like 'Sent': docker-compose exec dovecot-mailcow doveadm index -u user@domain '*' This will take some time depending on your machine and Solr may even run oom. Because re-indexing is very sensible, we did not include it to mailcow UI. You will need to take care of any errors while re-indexing a mailbox. Delete mailbox data \u00b6 mailcow will purge index data of a user when deleting a mailbox.","title":"FTS (Solr)"},{"location":"u_e-dovecot-fts/#fts-related-dovecot-commands","text":"docker-compose exec dovecot-mailcow doveadm fts rescan -u user@domain `# All: docker-compose exec dovecot-mailcow doveadm fts rescan -A Dovecot Wiki: \"Scan what mails exist in the full text search index and compare those to what actually exist in mailboxes. This removes mails from the index that have already been expunged and makes sure that the next doveadm index will index all the missing mails (if any).\" This does not re-index a mailbox. It basically repairs a given index. If you want to re-index a users data, you can run the followig command, where '*' can also be a mailbox mask like 'Sent': docker-compose exec dovecot-mailcow doveadm index -u user@domain '*' This will take some time depending on your machine and Solr may even run oom. Because re-indexing is very sensible, we did not include it to mailcow UI. You will need to take care of any errors while re-indexing a mailbox.","title":"FTS related Dovecot commands"},{"location":"u_e-dovecot-fts/#delete-mailbox-data","text":"mailcow will purge index data of a user when deleting a mailbox.","title":"Delete mailbox data"},{"location":"u_e-dovecot-idle_interval/","text":"Changing the IMAP IDLE interval \u00b6 What is the IDLE interval? \u00b6 Per default, dovecot sends a \"I'm still here\" notification to every client that has an open connection with dovecot to get mails as quickly as possible without manually polling it (IMAP PUSH). This notification is controlled by the setting imap_idle_notify_interval , whose default value is 2 minutes. The short interval results in the client getting a lot of messages for this connection, which is bad for mobile devices because every time the device receives this message, the mailing app has to wake up and look at it, only to see that it has nothing to do. This can result in unnecessary battery drain. Edit the value \u00b6 Change configuration \u00b6 Create a new file data/conf/dovecot/extra.conf (or edit it if it already exists). Insert the setting followed by the new value. For example, to set the interval to 29 minutes you could type: imap_idle_notify_interval = 29 mins I choose 29 minutes because this is the maximum value allowed by the corresponding RFC . Warning This isn't a default setting in mailcow because we don't know how this setting changes the behavior of other clients. Be careful if you change this and monitor different behavior. Reload dovecot \u00b6 Now reload dovecot: docker-compose exec dovecot-mailcow dovecot reload Info You can check the value of this setting with docker-compose exec dovecot-mailcow dovecot -a | grep \"imap_idle_notify_interval\" If you didn't change it, it should be at 2m. If you did change it, you should see your new value.","title":"IMAP IDLE interval"},{"location":"u_e-dovecot-idle_interval/#changing-the-imap-idle-interval","text":"","title":"Changing the IMAP IDLE interval"},{"location":"u_e-dovecot-idle_interval/#what-is-the-idle-interval","text":"Per default, dovecot sends a \"I'm still here\" notification to every client that has an open connection with dovecot to get mails as quickly as possible without manually polling it (IMAP PUSH). This notification is controlled by the setting imap_idle_notify_interval , whose default value is 2 minutes. The short interval results in the client getting a lot of messages for this connection, which is bad for mobile devices because every time the device receives this message, the mailing app has to wake up and look at it, only to see that it has nothing to do. This can result in unnecessary battery drain.","title":"What is the IDLE interval?"},{"location":"u_e-dovecot-idle_interval/#edit-the-value","text":"","title":"Edit the value"},{"location":"u_e-dovecot-idle_interval/#change-configuration","text":"Create a new file data/conf/dovecot/extra.conf (or edit it if it already exists). Insert the setting followed by the new value. For example, to set the interval to 29 minutes you could type: imap_idle_notify_interval = 29 mins I choose 29 minutes because this is the maximum value allowed by the corresponding RFC . Warning This isn't a default setting in mailcow because we don't know how this setting changes the behavior of other clients. Be careful if you change this and monitor different behavior.","title":"Change configuration"},{"location":"u_e-dovecot-idle_interval/#reload-dovecot","text":"Now reload dovecot: docker-compose exec dovecot-mailcow dovecot reload Info You can check the value of this setting with docker-compose exec dovecot-mailcow dovecot -a | grep \"imap_idle_notify_interval\" If you didn't change it, it should be at 2m. If you did change it, you should see your new value.","title":"Reload dovecot"},{"location":"u_e-dovecot-mail-crypt/","text":"Mails are stored encrypted, the key pair can be found in crypt-vol-1. If you want to decode/encode existing maildir files, you can use the following script at your own risk: Enter Dovecot by running docker-compose exec dovecot-mailcow /bin/bash in the mailcow-dockerized location. # Decrypt /var/vmail find /var/vmail/ -type f -regextype egrep -regex '.*S=.*W=.*' | while read -r file; do if [[ $(head -c7 \"$file\") == \"CRYPTED\" ]]; then doveadm fs get crypt private_key_path=/mail_crypt/ecprivkey.pem:public_key_path=/mail_crypt/ecpubkey.pem:posix:prefix=/ \\ \"$file\" > \"/tmp/$(basename \"$file\")\" chmod 600 \"/tmp/$(basename \"$file\")\" chown 5000:5000 \"/tmp/$(basename \"$file\")\" mv \"/tmp/$(basename \"$file\")\" \"$file\" fi done # Encrypt /var/vmail find /var/vmail/ -type f -regextype egrep -regex '.*S=.*W=.*' | while read -r file; do if [[ $(head -c7 \"$file\") != \"CRYPTED\" ]]; then doveadm fs put crypt private_key_path=/mail_crypt/ecprivkey.pem:public_key_path=/mail_crypt/ecpubkey.pem:posix:prefix=/ \\ \"$file\" \"$file\" chmod 600 \"$file\" chown 5000:5000 \"$file\" fi done","title":"Mail crypt"},{"location":"u_e-dovecot-more/","text":"Here is just an unsorted list of useful doveadm commands that could be useful. doveadm quota \u00b6 The quota get and quota recalc 1 commands are used to display or recalculate the current user's quota usage. The reported values are in kilobytes . To list the current quota status for a user / mailbox, do: doveadm quota get -u 'mailbox@example.org' To list the quota storage value for all users, do: doveadm quota get -A |grep \"STORAGE\" Recalculate a single user's quota usage: doveadm quota recalc -u 'mailbox@example.org' doveadm search \u00b6 The doveadm search 2 command is used to find messages matching your query. It can return the username, mailbox-GUID / -UID and message-GUIDs / -UIDs. To view the number of messages, by user, in their .Trash folder: doveadm search -A mailbox 'Trash' | awk '{print $1}' | sort | uniq -c Show all messages in a user's inbox older then 90 days: doveadm search -u 'mailbox@example.org' mailbox 'INBOX' savedbefore 90d Show all messages in any folder that are older then 30 days for mailbox@example.org : doveadm search -u 'mailbox@example.org' mailbox \"*\" savedbefore 30d https://wiki.dovecot.org/Tools/Doveadm/Quota \u21a9 https://wiki.dovecot.org/Tools/Doveadm/Search \u21a9","title":"More Examples with DOVEADM"},{"location":"u_e-dovecot-more/#doveadm-quota","text":"The quota get and quota recalc 1 commands are used to display or recalculate the current user's quota usage. The reported values are in kilobytes . To list the current quota status for a user / mailbox, do: doveadm quota get -u 'mailbox@example.org' To list the quota storage value for all users, do: doveadm quota get -A |grep \"STORAGE\" Recalculate a single user's quota usage: doveadm quota recalc -u 'mailbox@example.org'","title":"doveadm quota"},{"location":"u_e-dovecot-more/#doveadm-search","text":"The doveadm search 2 command is used to find messages matching your query. It can return the username, mailbox-GUID / -UID and message-GUIDs / -UIDs. To view the number of messages, by user, in their .Trash folder: doveadm search -A mailbox 'Trash' | awk '{print $1}' | sort | uniq -c Show all messages in a user's inbox older then 90 days: doveadm search -u 'mailbox@example.org' mailbox 'INBOX' savedbefore 90d Show all messages in any folder that are older then 30 days for mailbox@example.org : doveadm search -u 'mailbox@example.org' mailbox \"*\" savedbefore 30d https://wiki.dovecot.org/Tools/Doveadm/Quota \u21a9 https://wiki.dovecot.org/Tools/Doveadm/Search \u21a9","title":"doveadm search"},{"location":"u_e-dovecot-vmail-volume/","text":"If you want to use another folder for the vmail-volume, you can create an docker-compose.override.yml file and add: version: '2.1' volumes: vmail-vol-1: driver_opts: type: none device: /data/mailcow/vmail o: bind Moving an existing vmail folder: Locate the current vmail folder by its \"Mountpoint\" attribute: docker volume inspect mailcowdockerized_vmail-vol-1 Copy the _data folder to the new folder using cp -a , rsync -a or a similar non strcuture breaking copy command Stop mailcow by executing docker-compose down from within your mailcow root folder (e.g. \"/opt/mailcow-dockerized\") Create the file docker-compose.override.yml Delete the current vmail folder: docker volume rm mailcowdockerized_vmail-vol-1 Start mailcow by executing docker-compose up -d from within your mailcow root folder (e.g. \"/opt/mailcow-dockerized\")","title":"Move vmail volume"},{"location":"u_e-mailcow_ui-bl_wl/","text":"To add or edit an entry to your domain wide filter table, login to your mailcow UI as (domain) administrator. Info Be aware that a user may override this setting by setting his own black- and whitelist!","title":"Blacklist / Whitelist"},{"location":"u_e-mailcow_ui-config/","text":"Several configuration parameters of the mailcow UI can be changed by creating a file data/web/inc/vars.local.inc.php which overrides defaults settings found in data/web/inc/vars.inc.php . The local configuration file is persistent over updates of mailcow. Try not to change values inside data/web/inc/vars.inc.php , but use them as template for the local override. mailcow UI configuration parameters can be used to... ...change the default language 1 ...change the default bootstrap theme ...set a password complexity regex ...enable DKIM private key visibility ...set a pagination trigger size ...set default mailbox attributes ...change session lifetimes ...create fixed app menus (which cannot be changed in mailcow UI) ...set a default \"To\" field for relayhost tests ...set a timeout for Docker API requests ...toggle IP anonymization To change SOGos default language, you will need to edit data/conf/sogo/sogo.conf and replace \"English\" by your preferred language. \u21a9","title":"Configuration"},{"location":"u_e-mailcow_ui-spamalias/","text":"These temporary email aliases are mostly used for places where we need to provide an email address but don't want future correspondence with. They are also called spam alias. To create, delete or extend a temporary email aliases you need to login to mailcow's UI as a mailbox user and navigate to the tab Temporary email aliases :","title":"Temporary email aliase"},{"location":"u_e-mailcow_ui-spamfilter/","text":"A mailbox user may adjust the spam filter and black- / whitelist settings for his mailbox individually by navigating to the Spam filter tab in the users mailcow UI. Info For global adjustments on your spam filter please check our section on Rspamd . For a domain wide black- and whitelist please check our guide on Black / Whitelist","title":"Spamfilter"},{"location":"u_e-mailcow_ui-tagging/","text":"Mailbox users can tag their mail address like in me+facebook@example.org . They can control the tag handling in the users mailcow UI panel. Available Actions \u00b6 1. Move this message to a sub folder \"facebook\" (will be created lower case if not existing) 2. Prepend the tag to the subject: \"[facebook] Subject\"","title":"Tagging"},{"location":"u_e-mailcow_ui-tagging/#available-actions","text":"1. Move this message to a sub folder \"facebook\" (will be created lower case if not existing) 2. Prepend the tag to the subject: \"[facebook] Subject\"","title":"Available Actions"},{"location":"u_e-mailcow_ui-tfa/","text":"So far three methods for Two-Factor Authentication are implemented: U2F, Yubi OTP, and TOTP For U2F to work, you need an encrypted connection to the server (HTTPS) as well as a FIDO security key. Both U2F and Yubi OTP work well with the fantastic Yubikey . While Yubi OTP needs an active internet connection and an API ID + key, U2F will work with any FIDO U2F USB key out of the box, but can only be used when mailcow is accessed over HTTPS. U2F and Yubi OTP support multiple keys per user. As the third TFA method mailcow uses TOTP: time-based one-time passwords. Those passwords can be generated with apps like \"Google Authenticator\" after initially scanning a QR code or entering the given secret manually. As administrator you are able to temporary disable a domain administrators TFA login until they successfully logged in. The key used to login will be displayed in green, while other keys remain grey. Yubi OTP \u00b6 The Yubi API ID and Key will be checked against the Yubico Cloud API. When setting up TFA you will be asked for your personal API account for this key. The API ID, API key and the first 12 characters (your YubiKeys ID in modhex) are stored in the MySQL table as secret. U2F \u00b6 Only Google Chrome (+derivatives) and Opera support U2F authentication to this day natively. For Firefox you will need to install the \"U2F Support Add-on\" as provided on mozilla.org . U2F works without an internet connection. TOTP \u00b6 The best known TFA method mostly used with a smartphone.","title":"Two-Factor Authentication"},{"location":"u_e-mailcow_ui-tfa/#yubi-otp","text":"The Yubi API ID and Key will be checked against the Yubico Cloud API. When setting up TFA you will be asked for your personal API account for this key. The API ID, API key and the first 12 characters (your YubiKeys ID in modhex) are stored in the MySQL table as secret.","title":"Yubi OTP"},{"location":"u_e-mailcow_ui-tfa/#u2f","text":"Only Google Chrome (+derivatives) and Opera support U2F authentication to this day natively. For Firefox you will need to install the \"U2F Support Add-on\" as provided on mozilla.org . U2F works without an internet connection.","title":"U2F"},{"location":"u_e-mailcow_ui-tfa/#totp","text":"The best known TFA method mostly used with a smartphone.","title":"TOTP"},{"location":"u_e-nginx/","text":"Custom sites \u00b6 To create persistent (over updates) sites hosted by mailcow: dockerized, a new site configuration must be placed inside data/conf/nginx/ : nano data/conf/nginx/my_custom_site.conf The filename is not important, as long as the filename carries a .conf extension. It is also possible to extend the configuration of the default file site.conf file: nano data/conf/nginx/site.my_content.custom This filename does not need to have a \".conf\" extension, but follows the pattern site.*.custom , where * is a custom name. If PHP is to be included in a custom site, please use the PHP-FPM listener on phpfpm:9002 or create a new listener in data/conf/phpfpm/php-fpm.d/pools.conf . Restart Nginx (and PHP-FPM, if a new listener was created): docker-compose restart nginx-mailcow docker-compose restart php-fpm-mailcow","title":"Nginx"},{"location":"u_e-nginx/#custom-sites","text":"To create persistent (over updates) sites hosted by mailcow: dockerized, a new site configuration must be placed inside data/conf/nginx/ : nano data/conf/nginx/my_custom_site.conf The filename is not important, as long as the filename carries a .conf extension. It is also possible to extend the configuration of the default file site.conf file: nano data/conf/nginx/site.my_content.custom This filename does not need to have a \".conf\" extension, but follows the pattern site.*.custom , where * is a custom name. If PHP is to be included in a custom site, please use the PHP-FPM listener on phpfpm:9002 or create a new listener in data/conf/phpfpm/php-fpm.d/pools.conf . Restart Nginx (and PHP-FPM, if a new listener was created): docker-compose restart nginx-mailcow docker-compose restart php-fpm-mailcow","title":"Custom sites"},{"location":"u_e-postfix-anonym_headers/","text":"As of October the 15th, 2018 this is enabled by default. To disguise your users details like IP, email client, etc. we have to create a new file in data/conf/postfix/mailcow_anonymize_headers.pcre and insert the following: /^\\s*Received:.*Authenticated sender:(.+)/ REPLACE Received: from localhost (localhost [127.0.0.1]) (Authenticated sender:$1 /^\\s*User-Agent/ IGNORE /^\\s*X-Enigmail/ IGNORE /^\\s*X-Mailer/ IGNORE /^\\s*X-Originating-IP/ IGNORE /^\\s*X-Forward/ IGNORE Next we need to add the following to data/conf/postfix/main.cf : smtp_header_checks = pcre:/opt/postfix/conf/mailcow_anonymize_headers.pcre Then restart Postfix: docker exec -it $(docker ps -qf name=postfix-mailcow) postfix reload","title":"Anonymize Headers"},{"location":"u_e-postfix-attachment_size/","text":"Open data/conf/postfix/main.cf and set the message_size_limit accordingly in bytes. Restart Postfix: docker-compose restart postfix-mailcow","title":"Max. message size (attachment size)"},{"location":"u_e-postfix-disable_sender_verification/","text":"New guide \u00b6 Edit a mailbox and select \"Allow to send as *\". For historical reasons we kept the old and deprecated guide below: Deprecated guide \u00b6 This option is not best-practice and should only be implemented when there is no other option available to achieve whatever you are trying to do. Simply create a file data/conf/postfix/check_sasl_access and enter the following content. This user must exist in your installation and needs to authenticate before sending mail. user-to-allow-everything@example.com OK Open data/conf/postfix/main.cf and find smtpd_sender_restrictions . Prepend check_sasl_access hash:/opt/postfix/conf/check_sasl_access like this: smtpd_sender_restrictions = check_sasl_access hash:/opt/postfix/conf/check_sasl_access reject_authenticated_sender_login_mismatch [...] Run postmap on check_sasl_access: docker-compose exec postfix-mailcow postmap /opt/postfix/conf/check_sasl_access Restart the Postfix container.","title":"Disable Sender Addresses Verification"},{"location":"u_e-postfix-disable_sender_verification/#new-guide","text":"Edit a mailbox and select \"Allow to send as *\". For historical reasons we kept the old and deprecated guide below:","title":"New guide"},{"location":"u_e-postfix-disable_sender_verification/#deprecated-guide","text":"This option is not best-practice and should only be implemented when there is no other option available to achieve whatever you are trying to do. Simply create a file data/conf/postfix/check_sasl_access and enter the following content. This user must exist in your installation and needs to authenticate before sending mail. user-to-allow-everything@example.com OK Open data/conf/postfix/main.cf and find smtpd_sender_restrictions . Prepend check_sasl_access hash:/opt/postfix/conf/check_sasl_access like this: smtpd_sender_restrictions = check_sasl_access hash:/opt/postfix/conf/check_sasl_access reject_authenticated_sender_login_mismatch [...] Run postmap on check_sasl_access: docker-compose exec postfix-mailcow postmap /opt/postfix/conf/check_sasl_access Restart the Postfix container.","title":"Deprecated guide"},{"location":"u_e-postfix-pflogsumm/","text":"To use pflogsumm with the default logging driver, we need to query postfix-mailcow via docker logs and pipe the output to pflogsumm: docker logs --since 24h $(docker ps -qf name=postfix-mailcow) | pflogsumm The above log output is limited to the past 24 hours. It's also possible to create a daily pflogsumm report via cron. Create the file /etc/cron.d/pflogsumm with the following content: SHELL=/bin/bash 59 23 * * * root docker logs --since 24h $(docker ps -qf name=postfix-mailcow) | /usr/sbin/pflogsumm -d today | mail -s \"Postfix Report of $(date)\" postmaster@example.net Based on the last 24h postfix logs, this example sends every day at 23:59:00 a pflogsumm report to postmaster@example.net .","title":"Statistics with pflogsumm"},{"location":"u_e-redis/","text":"Redis is used as a key-value store for rspamd's and (some of) mailcow's settings and data. If you are unfamiliar with redis please read the introduction to redis and maybe visit this wonderfull guide on how to use it. Client \u00b6 To connect to the redis cli execute: docker-compose exec redis-mailcow redis-cli Debugging \u00b6 Here are some usefull commands for the redis-cli for debugging: MONITOR \u00b6 Listens for all requests received by the server in real time: # docker-compose exec redis-mailcow redis-cli 127.0.0.1:6379> monitor OK 1494077286.401963 [0 172.22.1.253:41228] \"SMEMBERS\" \"BAYES_SPAM_keys\" 1494077288.292970 [0 172.22.1.253:41229] \"SMEMBERS\" \"BAYES_SPAM_keys\" [...] KEYS \u00b6 Get all keys matching your pattern: KEYS * PING \u00b6 Test a connection: 127.0.0.1:6379> PING PONG If you want to know more, here is a cheat sheet .","title":"Redis"},{"location":"u_e-redis/#client","text":"To connect to the redis cli execute: docker-compose exec redis-mailcow redis-cli","title":"Client"},{"location":"u_e-redis/#debugging","text":"Here are some usefull commands for the redis-cli for debugging:","title":"Debugging"},{"location":"u_e-redis/#monitor","text":"Listens for all requests received by the server in real time: # docker-compose exec redis-mailcow redis-cli 127.0.0.1:6379> monitor OK 1494077286.401963 [0 172.22.1.253:41228] \"SMEMBERS\" \"BAYES_SPAM_keys\" 1494077288.292970 [0 172.22.1.253:41229] \"SMEMBERS\" \"BAYES_SPAM_keys\" [...]","title":"MONITOR"},{"location":"u_e-redis/#keys","text":"Get all keys matching your pattern: KEYS *","title":"KEYS"},{"location":"u_e-redis/#ping","text":"Test a connection: 127.0.0.1:6379> PING PONG If you want to know more, here is a cheat sheet .","title":"PING"},{"location":"u_e-rspamd/","text":"Rspamd is used for AV handling, DKIM signing and SPAM handling. It's a powerful and fast filter system. For a more in-depth documentation on Rspamd please visit its own documentation . Learn Spam & Ham \u00b6 Rspamd learns mail as spam or ham when you move a message in or out of the junk folder to any mailbox besides trash. This is achieved by using the Dovecot plugin \"antispam\" and a simple parser script. Rspamd also auto-learns mail when a high or low score is detected (see https://rspamd.com/doc/configuration/statistic.html#autolearning ) The bayes statistics are written to Redis as keys BAYES_HAM and BAYES_SPAM . You can also use Rspamd's web UI to learn ham and / or spam or to adjust certain settings of Rspamd. Learn Spam or Ham from existing directory \u00b6 You can use a one-liner to learn mail in plain-text (uncompressed) format: # Ham for file in /my/folder/cur/*; do docker exec -i $(docker-compose ps -q rspamd-mailcow) rspamc learn_ham < $file; done # Spam for file in /my/folder/.Junk/cur/*; do docker exec -i $(docker-compose ps -q rspamd-mailcow) rspamc learn_spam < $file; done Consider attaching a local folder as new volume to rspamd-mailcow in docker-compose.yml and learn given files inside the container. This can be used as workaround to parse compressed data with zcat. Example: for file in /data/old_mail/.Junk/cur/*; do rspamc learn_spam < zcat $file; done CLI tools \u00b6 docker-compose exec rspamd-mailcow rspamc --help docker-compose exec rspamd-mailcow rspamadm --help Disable Greylisting \u00b6 You can disable rspamd's greylisting server-wide by editing: {mailcow-dir}/data/conf/rspamd/local.d/greylist.conf Simply add the line: enabled = false; Save the file and then restart the rspamd container. See Rspamd documentation","title":"Rspamd"},{"location":"u_e-rspamd/#learn-spam-ham","text":"Rspamd learns mail as spam or ham when you move a message in or out of the junk folder to any mailbox besides trash. This is achieved by using the Dovecot plugin \"antispam\" and a simple parser script. Rspamd also auto-learns mail when a high or low score is detected (see https://rspamd.com/doc/configuration/statistic.html#autolearning ) The bayes statistics are written to Redis as keys BAYES_HAM and BAYES_SPAM . You can also use Rspamd's web UI to learn ham and / or spam or to adjust certain settings of Rspamd.","title":"Learn Spam &amp; Ham"},{"location":"u_e-rspamd/#learn-spam-or-ham-from-existing-directory","text":"You can use a one-liner to learn mail in plain-text (uncompressed) format: # Ham for file in /my/folder/cur/*; do docker exec -i $(docker-compose ps -q rspamd-mailcow) rspamc learn_ham < $file; done # Spam for file in /my/folder/.Junk/cur/*; do docker exec -i $(docker-compose ps -q rspamd-mailcow) rspamc learn_spam < $file; done Consider attaching a local folder as new volume to rspamd-mailcow in docker-compose.yml and learn given files inside the container. This can be used as workaround to parse compressed data with zcat. Example: for file in /data/old_mail/.Junk/cur/*; do rspamc learn_spam < zcat $file; done","title":"Learn Spam or Ham from existing directory"},{"location":"u_e-rspamd/#cli-tools","text":"docker-compose exec rspamd-mailcow rspamc --help docker-compose exec rspamd-mailcow rspamadm --help","title":"CLI tools"},{"location":"u_e-rspamd/#disable-greylisting","text":"You can disable rspamd's greylisting server-wide by editing: {mailcow-dir}/data/conf/rspamd/local.d/greylist.conf Simply add the line: enabled = false; Save the file and then restart the rspamd container. See Rspamd documentation","title":"Disable Greylisting"},{"location":"u_e-sogo/","text":"SOGo is used for accessing your mails via a webbrowser, adding and sharing your contacts or calendars. For a more in-depth documentation on SOGo please visit its own documentation . Change Theme \u00b6 As of December 21 2018 we removed our custom themes due to complains about missing colors in some address book and calendar sections. Some other problems were still existing and would not be fixed in the near future (switching colors on login screen, for example). Change Logo \u00b6 mailcow builds after 21 December 2018 can change SOGo's logo by replacing data/conf/sogo/sogo-full.svg . After you replaced said file you need to restart SOGo and Memcached containers by executing docker-compose restart memcached-mailcow sogo-mailcow .","title":"SOGo"},{"location":"u_e-sogo/#change-theme","text":"As of December 21 2018 we removed our custom themes due to complains about missing colors in some address book and calendar sections. Some other problems were still existing and would not be fixed in the near future (switching colors on login screen, for example).","title":"Change Theme"},{"location":"u_e-sogo/#change-logo","text":"mailcow builds after 21 December 2018 can change SOGo's logo by replacing data/conf/sogo/sogo-full.svg . After you replaced said file you need to restart SOGo and Memcached containers by executing docker-compose restart memcached-mailcow sogo-mailcow .","title":"Change Logo"},{"location":"u_e-unbound-fwd/","text":"If you want or have to use an external DNS service, you can define it in data/conf/unbound/unbound.conf : forward-zone: name: \".\" forward-addr: 8.8.8.8 forward-addr: 8.8.4.4 Please do not use a public resolver like we did in the example above. Many - if not all - blacklist lookups will fail with public resolvers. Important : Only DNSSEC validating DNS services will work. Restart Unbound after changing its config file: docker-compose restart unbound-mailcow","title":"Using an external DNS service"},{"location":"u_e-why_unbound/","text":"For DNS blacklist lookups and DNSSEC. Most systems use either a public or a local caching DNS resolver. That's a very bad idea when it comes to filter spam using DNS-based black hole lists (DNSBL) or similar technics. Most if not all providers apply a rate limit based on the DNS resolver that is used to query their service. Using a public resolver like Googles 4x8, OpenDNS or any other shared DNS resolver like your ISPs will hit that limit very soon.","title":"Why unbound?"},{"location":"client/client-android/","text":"Open the Email app. If this is your first email account, tap Add Account ; if not, tap More and Settings and then Add account . Select Microsoft Exchange ActiveSync . Enter your email address ( ) and password. Tap Sign in .","title":"Android"},{"location":"client/client-apple/","text":"Method 1 via Mobileconfig \u00b6 Email, contacts and calendars can be configured automatically on Apple devices by installing a profile. Method 1.1: IMAP, SMTP and Cal/CardDAV \u00b6 This method configures IMAP, CardDAV and CalDAV. Download and open the file from https://${MAILCOW_HOSTNAME}/mobileconfig.php mailcow.mobileconfig . Enter the unlock code (iPhone) or computer password (Mac). Enter your email password three times when prompted. Method 1.2: IMAP only \u00b6 This method configures IMAP only. Download and open the file from https://${MAILCOW_HOSTNAME}/mobileconfig.php?only_email mailcow.mobileconfig . Enter the unlock code (iPhone) or computer password (Mac). Enter your email password when prompted. Method 2 (Exchange ActiveSync emulation) \u00b6 On iOS, Exchange ActiveSync is also supported as an alternative to the procedure above. It has the advantage of supporting push email (i.e. you are immediately notified of incoming messages), but has some limitations, e.g. it does not support more than three email addresses per contact in your address book. Follow the steps below if you decide to use Exchange instead. Open the Settings app, tap Mail , tap Accounts , tap Add Acccount , select Exchange . Enter your email address ( ) and tap Next . Enter your password, tap Next again. Finally, tap Save .","title":"Apple macOS / iOS"},{"location":"client/client-apple/#method-1-via-mobileconfig","text":"Email, contacts and calendars can be configured automatically on Apple devices by installing a profile.","title":"Method 1 via Mobileconfig"},{"location":"client/client-apple/#method-11-imap-smtp-and-calcarddav","text":"This method configures IMAP, CardDAV and CalDAV. Download and open the file from https://${MAILCOW_HOSTNAME}/mobileconfig.php mailcow.mobileconfig . Enter the unlock code (iPhone) or computer password (Mac). Enter your email password three times when prompted.","title":"Method 1.1: IMAP, SMTP and Cal/CardDAV"},{"location":"client/client-apple/#method-12-imap-only","text":"This method configures IMAP only. Download and open the file from https://${MAILCOW_HOSTNAME}/mobileconfig.php?only_email mailcow.mobileconfig . Enter the unlock code (iPhone) or computer password (Mac). Enter your email password when prompted.","title":"Method 1.2: IMAP only"},{"location":"client/client-apple/#method-2-exchange-activesync-emulation","text":"On iOS, Exchange ActiveSync is also supported as an alternative to the procedure above. It has the advantage of supporting push email (i.e. you are immediately notified of incoming messages), but has some limitations, e.g. it does not support more than three email addresses per contact in your address book. Follow the steps below if you decide to use Exchange instead. Open the Settings app, tap Mail , tap Accounts , tap Add Acccount , select Exchange . Enter your email address ( ) and tap Next . Enter your password, tap Next again. Finally, tap Save .","title":"Method 2 (Exchange ActiveSync emulation)"},{"location":"client/client-emclient/","text":"Launch eM Client. If this is the first time you launched eM Client, it asks you to set up your account. Proceed to step 4. Go to Menu at the top, select Tools and Accounts . Enter your email address ( ) and click Start Now . Enter your password and click Continue . Enter your name ( ) and click Next . Click Finish .","title":"eM Client"},{"location":"client/client-kontact/","text":"Launch Kontact. If this is the first time you launched Kontact or KMail, it asks you to set up your account. Proceed to step 4. Go to Mail in the sidebar. Go to the Tools menu and select Account Wizard . Enter your name ( ) , email address ( ) and your password. Click Next . Click Create Account . If prompted, re-enter your password and click OK . Close the window by clicking Finish . Go to Calendar in the sidebar. Go to the Settings menu and select Configure KOrganizer . Go to the Calendars tab and click the Add button. Choose DAV groupware resource and click OK . Enter your email address ( ) and your password. Click Next . Select ScalableOGo from the dropdown menu and click Next . Enter your mailcow hostname into the Host field and click Next . Click Test Connection and then Finish . Finally, click OK twice. Once you have set up Kontact, you can also use KMail, KOrganizer and KAddressBook individually.","title":"KDE Kontact"},{"location":"client/client-manual/","text":"These instructions are valid for unchanged port bindings only! Email \u00b6 Service Encryption Host Port IMAP STARTTLS mailcow hostname 143 IMAPS SSL mailcow hostname 993 POP3 STARTTLS mailcow hostname 110 POP3S SSL mailcow hostname 995 SMTP STARTTLS mailcow hostname 587 SMTPS SSL mailcow hostname 465 Please use \"plain\" as authentication mechanisms. Contrary to the assumption no passwords will be transfered plain text, as no authentication is allowed to take place without TLS. Contacts and calendars \u00b6 SOGos default calendar (CalDAV) and contacts (CardDAV) URLs: CalDAV - https://mail.example.com/SOGo/dav/user@example.com/Calendar/personal/ CardDAV - https://mail.example.com/SOGo/dav/user@example.com/Contacts/personal/ Some applications may require you to use https://mail.example.com/SOGo/dav/ or the full path to your calender, which can be found and copied from within SOGo.","title":"Manual configuration"},{"location":"client/client-manual/#email","text":"Service Encryption Host Port IMAP STARTTLS mailcow hostname 143 IMAPS SSL mailcow hostname 993 POP3 STARTTLS mailcow hostname 110 POP3S SSL mailcow hostname 995 SMTP STARTTLS mailcow hostname 587 SMTPS SSL mailcow hostname 465 Please use \"plain\" as authentication mechanisms. Contrary to the assumption no passwords will be transfered plain text, as no authentication is allowed to take place without TLS.","title":"Email"},{"location":"client/client-manual/#contacts-and-calendars","text":"SOGos default calendar (CalDAV) and contacts (CardDAV) URLs: CalDAV - https://mail.example.com/SOGo/dav/user@example.com/Calendar/personal/ CardDAV - https://mail.example.com/SOGo/dav/user@example.com/Contacts/personal/ Some applications may require you to use https://mail.example.com/SOGo/dav/ or the full path to your calender, which can be found and copied from within SOGo.","title":"Contacts and calendars"},{"location":"client/client-outlook/","text":"Outlook 2016 (from Office365) on Windows \u00b6 This is only applicable if your server administrator has not disabled EAS for Outlook. If it is disabled, please follow the guide for Outlook 2007 instead. Outlook 2016 has an issue with autodiscover . Only Outlook 2016 from Office365 is affected. If you installed Outlook 2016 from another source, please follow the guide for Outlook 2013 or higher. For EAS you must use the old Assistent: Launch C:\\Program Files (x86)\\Microsoft Office\\root\\Office16\\OLCFG.EXE If this is the first time you launched Outlook, it asks you to add a new profile. After that the account setup can be started. Enter your name ( ) , email address ( ) and your password. Click Next . When prompted, enter your password again, check Remember my credentials and click OK . Click the Allow button. Click Finish . Outlook 2013 or higher on Windows \u00b6 This is only applicable if your server administrator has not disabled EAS for Outlook. If it is disabled, please follow the guide for Outlook 2007 instead. Launch Outlook. If this is the first time you launched Outlook, it asks you to set up your account. Proceed to step 4. Go to the File menu and click Add Account . Enter your name ( ) , email address ( ) and your password. Click Next . When prompted, enter your password again, check Remember my credentials and click OK . Click the Allow button. Click Finish . Outlook 2007 or 2010 on Windows \u00b6 Outlook 2007 or higher on Windows \u00b6 Download and install Outlook CalDav Synchronizer . Launch Outlook. If this is the first time you launched Outlook, it asks you to set up your account. Proceed to step 5. Go to the File menu and click Add Account . Enter your name ( ) , email address ( ) and your password. Click Next . Click Finish . Go to the CalDav Synchronizer ribbon and click Synchronization Profiles . Click the second button at top ( Add multiple profiles ), select Sogo , click Ok . Click the Get IMAP/POP3 account settings button. Click Discover resources and assign to Outlook folders . In the Select Resource window that pops up, select your main calendar (usually Personal Calendar ), click the ... button, assign it to Calendar , and click OK . Go to the Address Books and Tasks tabs and repeat repeat the process accordingly. Do not assign multiple calendars, address books or task lists! Close all windows with the OK buttons. Outlook 2011 or higher on macOS \u00b6 The Mac version of Outlook does not synchronize calendars and contacts and therefore is not supported.","title":"Microsoft Outlook"},{"location":"client/client-outlook/#outlook-2016-from-office365-on-windows","text":"This is only applicable if your server administrator has not disabled EAS for Outlook. If it is disabled, please follow the guide for Outlook 2007 instead. Outlook 2016 has an issue with autodiscover . Only Outlook 2016 from Office365 is affected. If you installed Outlook 2016 from another source, please follow the guide for Outlook 2013 or higher. For EAS you must use the old Assistent: Launch C:\\Program Files (x86)\\Microsoft Office\\root\\Office16\\OLCFG.EXE If this is the first time you launched Outlook, it asks you to add a new profile. After that the account setup can be started. Enter your name ( ) , email address ( ) and your password. Click Next . When prompted, enter your password again, check Remember my credentials and click OK . Click the Allow button. Click Finish .","title":"Outlook 2016 (from Office365) on Windows"},{"location":"client/client-outlook/#outlook-2013-or-higher-on-windows","text":"This is only applicable if your server administrator has not disabled EAS for Outlook. If it is disabled, please follow the guide for Outlook 2007 instead. Launch Outlook. If this is the first time you launched Outlook, it asks you to set up your account. Proceed to step 4. Go to the File menu and click Add Account . Enter your name ( ) , email address ( ) and your password. Click Next . When prompted, enter your password again, check Remember my credentials and click OK . Click the Allow button. Click Finish .","title":"Outlook 2013 or higher on Windows"},{"location":"client/client-outlook/#outlook-2007-or-2010-on-windows","text":"","title":"Outlook 2007 or 2010 on Windows"},{"location":"client/client-outlook/#outlook-2007-or-higher-on-windows","text":"Download and install Outlook CalDav Synchronizer . Launch Outlook. If this is the first time you launched Outlook, it asks you to set up your account. Proceed to step 5. Go to the File menu and click Add Account . Enter your name ( ) , email address ( ) and your password. Click Next . Click Finish . Go to the CalDav Synchronizer ribbon and click Synchronization Profiles . Click the second button at top ( Add multiple profiles ), select Sogo , click Ok . Click the Get IMAP/POP3 account settings button. Click Discover resources and assign to Outlook folders . In the Select Resource window that pops up, select your main calendar (usually Personal Calendar ), click the ... button, assign it to Calendar , and click OK . Go to the Address Books and Tasks tabs and repeat repeat the process accordingly. Do not assign multiple calendars, address books or task lists! Close all windows with the OK buttons.","title":"Outlook 2007 or higher on Windows"},{"location":"client/client-outlook/#outlook-2011-or-higher-on-macos","text":"The Mac version of Outlook does not synchronize calendars and contacts and therefore is not supported.","title":"Outlook 2011 or higher on macOS"},{"location":"client/client-thunderbird/","text":"Launch Thunderbird. If this is the first time you launched Thunderbird, it asks you whether you would like a new email address. Click Skip this and use my existing email and proceed to step 4. Go to the Tools menu and select Account Settings . Click the Account Actions dropdown menu at the bottom left and select Add Mail Account . Enter your name ( ) , email address ( ) and your password. Make sure the Remember password checkbox is selected and click Continue . Once the configuration has been automatically detected, click Done . If you already had other accounts configured in Thunderbird, select the new one ( ) on the left, click the Account Actions dropdown and select Set as Default . Close the account settings window with the OK button. In your web browser, download SOGo Integrator SOGo Integrator . Back in Thunderbird, go to the Tools menu and select Add-ons . Click Extensions on the left and ensure that the Lightning add-on is already installed. It is installed by default in the Windows and macOS versions of Thunderbird, but if you are running Linux and installed Thunderbird through your distribution's package manager, Lightning might be available as a separate package (e.g. xul-ext-lightning on Ubuntu). Click Extensions on the left, click the little gear icon at the top and select Install Add-on From File . Select the file you downloaded in step 9, click Open and, after waiting for a few seconds, Install Now . Click the Restart Now button at the top that appears. Thunderbird briefly shows a message that it is updating extensions, then restarts automatically once more. When you are prompted to authenticate for , enter your email address and password, check Use Password Manager and click OK . Automatic configuration of calendars and address books in Thunderbird is not currently supported. You can ask your server administrator to enable SOGo Integrator if you need it. Automatic configuration of calendars and address books (from step 9 onward) in Thunderbird is only supported if your server administrator has enabled SOGo Integrator .","title":"Mozilla Thunderbird"},{"location":"client/client-windows/","text":"Windows 8 and higher support email, contacts and calendar via Exchange ActiveSync. Open the Mail app. If you have not previously used Mail, you can click Add Account in the main window. Proceed to step 4. Click Accounts in the sidebar on the left, then click Add Account on the far right. Select Exchange . Enter your email address ( ) and click Next . Enter your password and click Log in . Once you have set up the Mail app, you can also use the People and Calendar apps.","title":"Windows Mail"},{"location":"client/client-windowsphone/","text":"Open the Settings app. Select email + accounts and tap add an account . Tap Exchange . Enter your email address ( ) and your password. Tap Sign in . Tap done .","title":"Windows Phone"}]}